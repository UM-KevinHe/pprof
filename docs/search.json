[{"path":"https://um-kevinhe.github.io/pprof/articles/Logis-FE.html","id":"estimation","dir":"Articles","previous_headings":"","what":"Estimation","title":"Logistic Fixed Effect Model","text":"computational tools designed general-purpose model fitting generalized linear models, relying Newton-Raphson Fisher scoring, fall short meeting computational demands number providers increases. limitation arises due substantial escalation computational cost incorporating thousands provider effects parameter space. Consequently, inversion Fisher information matrix becomes computationally burdensome task, posing significant challenge even workstations specifically engineered purposes. address issue, SerBIN algorithm, proposed Wu et al. (2022), leverages block structure Fisher information matrix. innovative approach substantially reduces time complexity associated inverting high-dimensional matrix, particularly confronted presence thousands provider effects. Consider binary outcome illustration. Let \\(m\\) represent total number providers, \\(n_i\\) denote number subjects provider \\(\\) \\((= 1, \\dots, m)\\), \\(N := \\sum_{= 1}^m n_i\\) signify total number records. subject \\(j\\) \\((j = 1, \\dots, n_i)\\) provider \\(\\), let \\(Y_{ij}\\) outcome variable, let \\(Z_{ij}\\) constitute vector risk factors. likelihood function can formulated follows: \\[l(\\boldsymbol{\\gamma}, \\boldsymbol{\\beta}) \\propto \\sum_{= 1}^m \\sum_{j = 1}^{n_i}\\{Y_{ij} \\cdot (\\gamma_i + Z_{ij}\\boldsymbol{\\beta}) - log(1 + e^{\\gamma_i + Z_{ij}\\boldsymbol{\\beta}})\\},\\] corresponding score function can expressed : \\[U(\\gamma_i) = \\sum_{j = 1}^{n_i} \\{Y_{ij} - \\frac{e^{\\gamma_i + Z_{ij}\\boldsymbol{\\beta}}}{1 + e^{\\gamma_i + Z_{ij}\\boldsymbol{\\beta}}}\\}\\] \\[U(\\beta_p) = \\sum_{= 1}^m \\sum_{j = 1}^{n_i} \\{Z_{ijp} \\cdot (Y_{ij} - \\frac{e^{\\gamma_i + Z_{ij}\\boldsymbol{\\beta}}}{1 + e^{\\gamma_i + Z_{ij}\\boldsymbol{\\beta}}})\\}.\\] current context, information matrix can visualized \\(2 \\times 2\\) block matrix, expressed : \\[ (\\boldsymbol{\\gamma}, \\boldsymbol{\\beta}) = \\begin{pmatrix} (\\boldsymbol{\\gamma}) & (\\boldsymbol{\\gamma}, \\boldsymbol{\\beta})   \\\\   (\\boldsymbol{\\beta}, \\boldsymbol{\\gamma}) & (\\boldsymbol{\\beta})  \\end{pmatrix} \\equiv \\begin{pmatrix} I_{11} & I_{12} \\\\ I_{21} & I_{22}  \\end{pmatrix}.\\] important note \\((\\boldsymbol{\\gamma})\\) block “large” diagonal. Consequently, can compute \\(^{-1}(\\boldsymbol{\\gamma}, \\boldsymbol{\\beta})\\) follows: \\[^{-1}(\\boldsymbol{\\gamma}, \\boldsymbol{\\beta}) = \\begin{pmatrix} I_{11}^{-1} + {J_1}^{T} S^{-1} J_1 & - {J_2}^{T}   \\\\   - {J_2} &  S^{-1}  \\end{pmatrix},\\] \\(J_1 = I_{21}{I_{11}}^{-1}\\), \\(S = I_{22} - J_1 I_{12}\\), \\(J_2 = S^{-1}J_1\\). bottleneck SerBIN lies computing \\(I_{22}\\) (.e., \\((\\boldsymbol{\\beta})\\)) sample size \\(n\\) exceptionally large. However, element \\(I_{22}\\) can individually computed, allowing parallel computing enhance computational efficiency: \\[(\\boldsymbol{\\beta})_{r,c} = \\langle Z^{(r)}, Z^{(c)} \\circ \\mathbb{P} \\rangle,\\] \\(\\langle , b \\rangle\\) denotes inner product \\(\\) \\(b\\) (.e., \\(^T b\\)), \\(\\circ\\) represents Hadamard product (element-wise product), \\(\\mathbb{P} = \\frac{e^{\\gamma_i + Z_{ij}\\boldsymbol{\\beta}}}{(1 + e^{\\gamma_i + Z_{ij}\\boldsymbol{\\beta}})^2}\\). ’s worth noting \\((\\boldsymbol{\\beta})\\) symmetric, ’s need calculate upper triangular entries. (avoid instability \\(\\boldsymbol{\\gamma}\\) estimation code, restrict \\({\\hat{\\boldsymbol{\\gamma}}}^{[l]}\\) estimates specific range iteration. default range \\({\\hat{\\boldsymbol{\\gamma}}_{med}}^{[l-1]} \\pm 10\\).)","code":""},{"path":"https://um-kevinhe.github.io/pprof/articles/Logis-FE.html","id":"standardized-ratiorate","dir":"Articles","previous_headings":"","what":"Standardized Ratio/Rate","title":"Logistic Fixed Effect Model","text":"addition outputs covariate coefficients provider effects, users can use SR_output() function specifying standardization method (“direct” “indirect”) computing provider-level ratio/rate, : Indirect standardization ratio (ISR) computed follows: \\[ISR_i = \\frac{O_i}{E_i},\\] \\(O_i = \\sum_{j = 1}^{n_i} Y_{ij}\\) observed number events provider \\(\\), \\(E_i\\) “expected” number events provider \\(\\), calculated \\(E_i = \\sum_{j = 1}^{n_i} \\frac{e^{\\gamma_0 + Z_{ij}\\boldsymbol{\\beta}}}{1 + e^{\\gamma_0 + Z_{ij}\\boldsymbol{\\beta}}}\\). , \\(\\gamma_0\\) represents “population average”, defaulting median value \\(\\hat{\\gamma}_i\\)’s. context indirect standardization, interpretation \\(E_i\\) can expressed follows: “expected number events provider \\(\\), provider \\(\\) performs national average level?” (see Schaubel. (2014) Jones, Ohlssen, Sprigelhalter. (2008) ). \\(ISR_i >1\\) indicates provider \\(\\)’s observed event rate higher expected based national average. Direct standardization ratio (DSR) determined formula: \\[{DSR}_k = \\frac{E^{(k)}}{O},\\] \\(O = \\sum_{= 1}^m \\sum_{j = 1}^{n_i} Y_{ij}\\), \\(E^{(k)} = \\sum_{= 1}^m \\sum_{j = 1}^{n_i} \\frac{e^{\\hat{\\gamma}_k + Z_{ij}\\boldsymbol{\\beta}}}{1 + e^{\\hat{\\gamma}_k + Z_{ij}\\boldsymbol{\\beta}}}\\). context direct standardization, understanding \\(E^{(k)}\\) can articulated follows: “expected number total events, providers performs provider \\(k\\)?”. \\(\\hat{\\gamma}_k = \\infty\\), \\(E^{(k)} = N\\), resulting \\({DSR}_{k} = \\frac{N}{O}\\); \\(\\hat{\\gamma}_k = -\\infty\\), \\(E^{(k)} = 0\\), leading \\({DSR}_{k} = 0\\). Users also option request function generate “standardized rate”, computed \\(ISR_i\\) \\(DSR_k \\times \\frac{O}{N}\\). (Please aware computed “indirect rate” might surpass 100%. prevent confusion, manually constrain result within range 0% 100%.)","code":""},{"path":"https://um-kevinhe.github.io/pprof/articles/Logis-FE.html","id":"hypothesis-testing","dir":"Articles","previous_headings":"","what":"Hypothesis Testing","title":"Logistic Fixed Effect Model","text":"test_fe() function provides hypothesis testing outcomes assist users identifying outlier providers extreme outcomes. default, use median estimated provider effects null value (.e. \\(H_0: \\gamma_i = \\hat{\\gamma}_{med}\\)). Users can choose various testing methods, including “exact.poisbinom” (default), “exact.bootstrap,” “score,” “wald”: “exact.poisbinom”: Assume \\(Y_{ij}|Z_{ij} \\sim Bernoulli(p_{ij})\\). Since within provider \\(\\), \\(p_{ij} = \\frac{e^{\\gamma_i + Z_{ij}\\boldsymbol{\\beta}}}{1 + e^{\\gamma_i + Z_{ij}\\boldsymbol{\\beta}}}\\) varies, \\(O_i | Z_i = \\sum_{j = 1}^{n_i}Y_{ij}\\) follow Poisson-binomial distribution. calculate probability “getting extreme number \\(O_i\\), \\(H_0: \\gamma_i = \\gamma_0\\) true” based Poisson-binomial distribution. “exact.bootstrap”: test conducted following steps: (1) Repeat \\(B =\\) 10,000 times (default): Simulate \\({Y_{ij}}^{(b)} \\sim Bernoulli(\\frac{e^{\\gamma_0 + Z_{ij}\\boldsymbol{\\beta}}}{1 + e^{\\gamma_0 + Z_{ij}\\boldsymbol{\\beta}}})\\), calculate \\({Y_{}}^{(b)} = \\sum_{j = 1}^{n_i} {Y_{ij}}^{(b)}\\). (2) Calculate frequency \\({Y_{}}^{(b)}\\) extreme \\(O_i\\). (3) calculate \\(p-\\)value. (“Exact Bootstrap” consistent “Exact Poisson-binomial”) “wald”: \\(H_0: \\gamma_i = \\gamma_0\\) true, \\(\\frac{\\hat{\\gamma}_i - \\gamma_0}{se(\\hat{\\gamma}_i)} \\sim N(0, 1)\\). \\(se(\\hat{\\gamma}_i)\\) can computed using formula mentioned earlier (\\(I_{11}^{-1} + {J_1}^{T} S^{-1} J_1\\)) diagonal elements. (“Wald test” valid outlying providers (.e. \\(\\hat{\\gamma}_i = \\pm \\infty\\)). “Error message” added code inform users.) “score”: standard score test procedure, first step involves computing “restricted MLE” \\(\\hat{\\boldsymbol{\\beta}}^{()}\\). Subsequently, calculate \\(U(\\gamma_i)|_{\\gamma_i = \\gamma_0} = \\sum_{j = 1}^{n_i} \\{Y_{ij} - \\frac{e^{\\gamma_0 + Z_{ij}\\hat{\\boldsymbol{\\beta}}^{()}}}{1 + e^{\\gamma_0 + Z_{ij}\\hat{\\boldsymbol{\\beta}}^{()}}}\\}\\), \\((\\gamma_i)|_{\\gamma_i = \\gamma_0} = \\sum_{j = 1}^{n_i} \\{\\frac{e^{\\gamma_0 + Z_{ij}\\hat{\\boldsymbol{\\beta}}^{()}}}{(1 + e^{\\gamma_0 + Z_{ij}\\hat{\\boldsymbol{\\beta}}^{()}})^2}\\}\\). \\(H_0\\), \\(\\frac{U(\\gamma_i)|_{\\gamma_i = \\gamma_0}}{\\sqrt{(\\gamma_i)|_{\\gamma_i = \\gamma_0}}} \\sim N(0, 1)\\). However, given potentially high dimensionality \\(\\gamma\\), re-fitting new restricted model provider effect test challenging. Therefore, instead using \\(\\hat{\\boldsymbol{\\beta}}^{()}\\), solely employ \\(\\hat{\\boldsymbol{\\beta}}\\) estimated full model.","code":""},{"path":"https://um-kevinhe.github.io/pprof/articles/Logis-FE.html","id":"confidence-interval","dir":"Articles","previous_headings":"","what":"Confidence Interval","title":"Logistic Fixed Effect Model","text":"choices calculating confidence intervals \\(\\gamma_i\\) include following methods: “exact”: Based Poisson binomial distribution \\(O_i|Z_i\\). numerically find range \\(\\gamma_0\\) \\(P_{exact} \\geq 0.05\\), involves locating roots equation. “wald”: Directly convert \\(\\hat{\\gamma}_i \\pm 1.96 \\times se(\\hat{\\gamma}_i)\\), invalid outlying providers. “score”: Find range \\(\\gamma_0\\) \\(\\frac{U(\\gamma_i)|_{\\gamma_i = \\gamma_0}}{\\sqrt{(\\gamma_i)|_{\\gamma_i = \\gamma_0}}} \\(-1.96, 1.96)\\). can also derive confidence interval \\(ISR_i\\) \\(DSR_i\\) based confidence interval \\(\\gamma_i\\). \\(ISR_i\\): Given score equation provides \\(O_i = \\sum_{j = 1}^{n_i} \\frac{e^{\\hat{\\gamma}_i + Z_{ij}\\hat{\\boldsymbol{\\beta}}}}{1 + e^{\\hat{\\gamma}_i + Z_{ij}\\hat{\\boldsymbol{\\beta}}}}\\), CI \\(ISR_i\\) can calculated : \\[CI_{ISR_i} = (\\frac{\\sum_{j = 1}^{n_i} \\frac{e^{\\gamma_{,L} + Z_{ij}\\hat{\\boldsymbol{\\beta}}}}{1 + e^{\\gamma_{,L} + Z_{ij}\\hat{\\boldsymbol{\\beta}}}}}{E_i}, \\frac{\\sum_{j = 1}^{n_i} \\frac{e^{\\gamma_{,U} + Z_{ij}\\hat{\\boldsymbol{\\beta}}}}{1 + e^{\\gamma_{,U} + Z_{ij}\\hat{\\boldsymbol{\\beta}}}}}{E_i}).\\] , \\(\\gamma_{,L}\\) \\(\\gamma_{,U}\\) lower upper bounds \\(\\gamma_i\\). (\\(CI(\\gamma_i)\\) covers \\(\\gamma_0\\), \\(CI_{ISR_i}\\) cover 1.) \\(DSR_k\\): Considering \\(DSR_{0} = \\frac{\\sum_{= 1}^m \\sum_{j = 1}^{n_i} \\frac{e^{{\\gamma}_0 + Z_{ij}\\hat{\\boldsymbol{\\beta}}}}{1 + e^{{\\gamma}_0 + Z_{ij}\\hat{\\boldsymbol{\\beta}}}}}{\\sum_{= 1}^m O_i}.\\) CI \\(DSR_k\\) can calculated : \\[CI_{DSR_k} = (\\frac{\\sum_{= 1}^m \\sum_{j = 1}^{n_i} \\frac{e^{{\\gamma}_{k,L} + Z_{ij}\\hat{\\boldsymbol{\\beta}}}}{1 + e^{{\\gamma}_{k,L} + Z_{ij}\\hat{\\boldsymbol{\\beta}}}}}{\\sum_{= 1}^m O_i}, \\frac{\\sum_{= 1}^m \\sum_{j = 1}^{n_i} \\frac{e^{{\\gamma}_{k,U} + Z_{ij}\\hat{\\boldsymbol{\\beta}}}}{1 + e^{{\\gamma}_{k,U} + Z_{ij}\\hat{\\boldsymbol{\\beta}}}}}{\\sum_{= 1}^m O_i}).\\] Similarly, \\(\\gamma_{k,L}\\) \\(\\gamma_{k,U}\\) lower upper bounds \\(\\gamma_k\\). (\\(CI(\\gamma_k)\\) covers \\(\\gamma_0\\), \\(CI_{DSR_k}\\) cover \\(DSR_k\\).)","code":""},{"path":"https://um-kevinhe.github.io/pprof/articles/Models.html","id":"estimation","dir":"Articles","previous_headings":"","what":"Estimation","title":"Models","text":"computational tools designed general-purpose model fitting generalized linear models, relying Newton-Raphson Fisher scoring, fall short meeting computational demands number providers increases. limitation arises due substantial escalation computational cost incorporating thousands provider effects parameter space. Consequently, inversion Fisher information matrix becomes computationally burdensome task, posing significant challenge even workstations specifically engineered purposes. address issue, SerBIN algorithm, proposed Wu et al. (2022), leverages block structure Fisher information matrix. innovative approach substantially reduces time complexity associated inverting high-dimensional matrix, particularly confronted presence thousands provider effects. Consider binary outcome illustration. Let \\(m\\) represent total number providers, \\(n_i\\) denote number subjects provider \\(\\) \\((= 1, \\dots, m)\\), \\(N := \\sum_{= 1}^m n_i\\) signify total number records. subject \\(j\\) \\((j = 1, \\dots, n_i)\\) provider \\(\\), let \\(Y_{ij}\\) outcome variable, let \\(Z_{ij}\\) constitute vector risk factors. likelihood function can formulated follows: \\[l(\\boldsymbol{\\gamma}, \\boldsymbol{\\beta}) \\propto \\sum_{= 1}^m \\sum_{j = 1}^{n_i}\\{Y_{ij} \\cdot (\\gamma_i + Z_{ij}\\boldsymbol{\\beta}) - log(1 + e^{\\gamma_i + Z_{ij}\\boldsymbol{\\beta}})\\},\\] corresponding score function can expressed : \\[U(\\gamma_i) = \\sum_{j = 1}^{n_i} \\{Y_{ij} - \\frac{e^{\\gamma_i + Z_{ij}\\boldsymbol{\\beta}}}{1 + e^{\\gamma_i + Z_{ij}\\boldsymbol{\\beta}}}\\}\\] \\[U(\\beta_p) = \\sum_{= 1}^m \\sum_{j = 1}^{n_i} \\{Z_{ijp} \\cdot (Y_{ij} - \\frac{e^{\\gamma_i + Z_{ij}\\boldsymbol{\\beta}}}{1 + e^{\\gamma_i + Z_{ij}\\boldsymbol{\\beta}}})\\}.\\] current context, information matrix can visualized \\(2 \\times 2\\) block matrix, expressed : \\[ (\\boldsymbol{\\gamma}, \\boldsymbol{\\beta}) = \\begin{pmatrix} (\\boldsymbol{\\gamma}) & (\\boldsymbol{\\gamma}, \\boldsymbol{\\beta})   \\\\   (\\boldsymbol{\\beta}, \\boldsymbol{\\gamma}) & (\\boldsymbol{\\beta})  \\end{pmatrix} \\equiv \\begin{pmatrix} I_{11} & I_{12} \\\\ I_{21} & I_{22}  \\end{pmatrix}.\\] important note \\((\\boldsymbol{\\gamma})\\) block “large” diagonal. Consequently, can compute \\(^{-1}(\\boldsymbol{\\gamma}, \\boldsymbol{\\beta})\\) follows: \\[^{-1}(\\boldsymbol{\\gamma}, \\boldsymbol{\\beta}) = \\begin{pmatrix} I_{11}^{-1} + {J_1}^{T} S^{-1} J_1 & - {J_2}^{T}   \\\\   - {J_2} &  S^{-1}  \\end{pmatrix},\\] \\(J_1 = I_{21}{I_{11}}^{-1}\\), \\(S = I_{22} - J_1 I_{12}\\), \\(J_2 = S^{-1}J_1\\). bottleneck SerBIN lies computing \\(I_{22}\\) (.e., \\((\\boldsymbol{\\beta})\\)) sample size \\(n\\) exceptionally large. However, element \\(I_{22}\\) can individually computed, allowing parallel computing enhance computational efficiency: \\[(\\boldsymbol{\\beta})_{r,c} = \\langle Z^{(r)}, Z^{(c)} \\circ \\mathbb{P} \\rangle,\\] \\(\\langle , b \\rangle\\) denotes inner product \\(\\) \\(b\\) (.e., \\(^T b\\)), \\(\\circ\\) represents Hadamard product (element-wise product), \\(\\mathbb{P} = \\frac{e^{\\gamma_i + Z_{ij}\\boldsymbol{\\beta}}}{(1 + e^{\\gamma_i + Z_{ij}\\boldsymbol{\\beta}})^2}\\). ’s worth noting \\((\\boldsymbol{\\beta})\\) symmetric, ’s need calculate upper triangular entries. (avoid instability \\(\\boldsymbol{\\gamma}\\) estimation code, restrict \\({\\hat{\\boldsymbol{\\gamma}}}^{[l]}\\) estimates specific range iteration. default range \\({\\hat{\\boldsymbol{\\gamma}}_{med}}^{[l-1]} \\pm 10\\).)","code":""},{"path":"https://um-kevinhe.github.io/pprof/articles/Models.html","id":"standardized-ratiorate","dir":"Articles","previous_headings":"","what":"Standardized Ratio/Rate","title":"Models","text":"addition outputs covariate coefficients provider effects, users can use SR_output() function specifying standardization method (“direct” “indirect”) computing provider-level ratio/rate, : Indirect standardization ratio (ISR) computed follows: \\[ISR_i = \\frac{O_i}{E_i},\\] \\(O_i = \\sum_{j = 1}^{n_i} Y_{ij}\\) observed number events provider \\(\\), \\(E_i\\) “expected” number events provider \\(\\), calculated \\(E_i = \\sum_{j = 1}^{n_i} \\frac{e^{\\gamma_0 + Z_{ij}\\boldsymbol{\\beta}}}{1 + e^{\\gamma_0 + Z_{ij}\\boldsymbol{\\beta}}}\\). , \\(\\gamma_0\\) represents “population average”, defaulting median value \\(\\hat{\\gamma}_i\\)’s. context indirect standardization, interpretation \\(E_i\\) can expressed follows: “expected number events provider \\(\\), provider \\(\\) performs national average level?” (see Schaubel. (2014) Jones, Ohlssen, Sprigelhalter. (2008) ). \\(ISR_i >1\\) indicates provider \\(\\)’s observed event rate higher expected based national average. Direct standardization ratio (DSR) determined formula: \\[{DSR}_k = \\frac{E^{(k)}}{O},\\] \\(O = \\sum_{= 1}^m \\sum_{j = 1}^{n_i} Y_{ij}\\), \\(E^{(k)} = \\sum_{= 1}^m \\sum_{j = 1}^{n_i} \\frac{e^{\\hat{\\gamma}_k + Z_{ij}\\boldsymbol{\\beta}}}{1 + e^{\\hat{\\gamma}_k + Z_{ij}\\boldsymbol{\\beta}}}\\). context direct standardization, understanding \\(E^{(k)}\\) can articulated follows: “expected number total events, providers performs provider \\(k\\)?”. \\(\\hat{\\gamma}_k = \\infty\\), \\(E^{(k)} = N\\), resulting \\({DSR}_{k} = \\frac{N}{O}\\); \\(\\hat{\\gamma}_k = -\\infty\\), \\(E^{(k)} = 0\\), leading \\({DSR}_{k} = 0\\). Users also option request function generate “standardized rate”, computed \\(ISR_i\\) \\(DSR_k \\times \\frac{O}{N}\\). (Please aware computed “indirect rate” might surpass 100%. prevent confusion, manually constrain result within range 0% 100%.)","code":""},{"path":"https://um-kevinhe.github.io/pprof/articles/Models.html","id":"hypothesis-testing","dir":"Articles","previous_headings":"","what":"Hypothesis Testing","title":"Models","text":"test_fe() function provides hypothesis testing outcomes assist users identifying outlier providers extreme outcomes. default, use median estimated provider effects null value (.e. \\(H_0: \\gamma_i = \\hat{\\gamma}_{med}\\)). Users can choose various testing methods, including “exact.poisbinom” (default), “exact.bootstrap,” “score,” “wald”: “exact.poisbinom”: Assume \\(Y_{ij}|Z_{ij} \\sim Bernoulli(p_{ij})\\). Since within provider \\(\\), \\(p_{ij} = \\frac{e^{\\gamma_i + Z_{ij}\\boldsymbol{\\beta}}}{1 + e^{\\gamma_i + Z_{ij}\\boldsymbol{\\beta}}}\\) varies, \\(O_i | Z_i = \\sum_{j = 1}^{n_i}Y_{ij}\\) follow Poisson-binomial distribution. calculate probability “getting extreme number \\(O_i\\), \\(H_0: \\gamma_i = \\gamma_0\\) true” based Poisson-binomial distribution. “exact.bootstrap”: test conducted following steps: (1) Repeat \\(B =\\) 10,000 times (default): Simulate \\({Y_{ij}}^{(b)} \\sim Bernoulli(\\frac{e^{\\gamma_0 + Z_{ij}\\boldsymbol{\\beta}}}{1 + e^{\\gamma_0 + Z_{ij}\\boldsymbol{\\beta}}})\\), calculate \\({Y_{}}^{(b)} = \\sum_{j = 1}^{n_i} {Y_{ij}}^{(b)}\\). (2) Calculate frequency \\({Y_{}}^{(b)}\\) extreme \\(O_i\\). (3) calculate \\(p-\\)value. (“Exact Bootstrap” consistent “Exact Poisson-binomial”) “wald”: \\(H_0: \\gamma_i = \\gamma_0\\) true, \\(\\frac{\\hat{\\gamma}_i - \\gamma_0}{se(\\hat{\\gamma}_i)} \\sim N(0, 1)\\). \\(se(\\hat{\\gamma}_i)\\) can computed using formula mentioned earlier (\\(I_{11}^{-1} + {J_1}^{T} S^{-1} J_1\\)) diagonal elements. (“Wald test” valid outlying providers (.e. \\(\\hat{\\gamma}_i = \\pm \\infty\\)). “Error message” added code inform users.) “score”: standard score test procedure, first step involves computing “restricted MLE” \\(\\hat{\\boldsymbol{\\beta}}^{()}\\). Subsequently, calculate \\(U(\\gamma_i)|_{\\gamma_i = \\gamma_0} = \\sum_{j = 1}^{n_i} \\{Y_{ij} - \\frac{e^{\\gamma_0 + Z_{ij}\\hat{\\boldsymbol{\\beta}}^{()}}}{1 + e^{\\gamma_0 + Z_{ij}\\hat{\\boldsymbol{\\beta}}^{()}}}\\}\\), \\((\\gamma_i)|_{\\gamma_i = \\gamma_0} = \\sum_{j = 1}^{n_i} \\{\\frac{e^{\\gamma_0 + Z_{ij}\\hat{\\boldsymbol{\\beta}}^{()}}}{(1 + e^{\\gamma_0 + Z_{ij}\\hat{\\boldsymbol{\\beta}}^{()}})^2}\\}\\). \\(H_0\\), \\(\\frac{U(\\gamma_i)|_{\\gamma_i = \\gamma_0}}{\\sqrt{(\\gamma_i)|_{\\gamma_i = \\gamma_0}}} \\sim N(0, 1)\\). However, given potentially high dimensionality \\(\\gamma\\), re-fitting new restricted model provider effect test challenging. Therefore, instead using \\(\\hat{\\boldsymbol{\\beta}}^{()}\\), solely employ \\(\\hat{\\boldsymbol{\\beta}}\\) estimated full model.","code":""},{"path":"https://um-kevinhe.github.io/pprof/articles/Models.html","id":"confidence-interval","dir":"Articles","previous_headings":"","what":"Confidence Interval","title":"Models","text":"choices calculating confidence intervals \\(\\gamma_i\\) include following methods: “exact”: Based Poisson binomial distribution \\(O_i|Z_i\\). numerically find range \\(\\gamma_0\\) \\(P_{exact} \\geq 0.05\\), involves locating roots equation. “wald”: Directly convert \\(\\hat{\\gamma}_i \\pm 1.96 \\times se(\\hat{\\gamma}_i)\\), invalid outlying providers. “score”: Find range \\(\\gamma_0\\) \\(\\frac{U(\\gamma_i)|_{\\gamma_i = \\gamma_0}}{\\sqrt{(\\gamma_i)|_{\\gamma_i = \\gamma_0}}} \\(-1.96, 1.96)\\). can also derive confidence interval \\(ISR_i\\) \\(DSR_i\\) based confidence interval \\(\\gamma_i\\). \\(ISR_i\\): Given score equation provides \\(O_i = \\sum_{j = 1}^{n_i} \\frac{e^{\\hat{\\gamma}_i + Z_{ij}\\hat{\\boldsymbol{\\beta}}}}{1 + e^{\\hat{\\gamma}_i + Z_{ij}\\hat{\\boldsymbol{\\beta}}}}\\), CI \\(ISR_i\\) can calculated : \\[CI_{ISR_i} = (\\frac{\\sum_{j = 1}^{n_i} \\frac{e^{\\gamma_{,L} + Z_{ij}\\hat{\\boldsymbol{\\beta}}}}{1 + e^{\\gamma_{,L} + Z_{ij}\\hat{\\boldsymbol{\\beta}}}}}{E_i}, \\frac{\\sum_{j = 1}^{n_i} \\frac{e^{\\gamma_{,U} + Z_{ij}\\hat{\\boldsymbol{\\beta}}}}{1 + e^{\\gamma_{,U} + Z_{ij}\\hat{\\boldsymbol{\\beta}}}}}{E_i}).\\] , \\(\\gamma_{,L}\\) \\(\\gamma_{,U}\\) lower upper bounds \\(\\gamma_i\\). (\\(CI(\\gamma_i)\\) covers \\(\\gamma_0\\), \\(CI_{ISR_i}\\) cover 1.) \\(DSR_k\\): Considering \\(DSR_{0} = \\frac{\\sum_{= 1}^m \\sum_{j = 1}^{n_i} \\frac{e^{{\\gamma}_0 + Z_{ij}\\hat{\\boldsymbol{\\beta}}}}{1 + e^{{\\gamma}_0 + Z_{ij}\\hat{\\boldsymbol{\\beta}}}}}{\\sum_{= 1}^m O_i}.\\) CI \\(DSR_k\\) can calculated : \\[CI_{DSR_k} = (\\frac{\\sum_{= 1}^m \\sum_{j = 1}^{n_i} \\frac{e^{{\\gamma}_{k,L} + Z_{ij}\\hat{\\boldsymbol{\\beta}}}}{1 + e^{{\\gamma}_{k,L} + Z_{ij}\\hat{\\boldsymbol{\\beta}}}}}{\\sum_{= 1}^m O_i}, \\frac{\\sum_{= 1}^m \\sum_{j = 1}^{n_i} \\frac{e^{{\\gamma}_{k,U} + Z_{ij}\\hat{\\boldsymbol{\\beta}}}}{1 + e^{{\\gamma}_{k,U} + Z_{ij}\\hat{\\boldsymbol{\\beta}}}}}{\\sum_{= 1}^m O_i}).\\] Similarly, \\(\\gamma_{k,L}\\) \\(\\gamma_{k,U}\\) lower upper bounds \\(\\gamma_k\\). (\\(CI(\\gamma_k)\\) covers \\(\\gamma_0\\), \\(CI_{DSR_k}\\) cover \\(DSR_k\\).)","code":""},{"path":"https://um-kevinhe.github.io/pprof/articles/pprof.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Getting Started with pprof","text":"pprof software package designed provide different risk-adjusted models data various types outcomes, specifically focusing field provider profiling. addition model fitting, package equips suite functions calculating standardized ratios rates, conducting statistical inference, generating various plots aid interpretation results. Currently, package supports logistic fixed effect models binary outcomes, well linear fixed effect linear random effect models continuous outcomes. ongoing development, plans incorporate additional models robust testing methods. tutorial provides brief overview package’s structure detailed guide utilize various functions. Simulated example data (ExampleDataBinary) binary outcomes used illustration, alongside real data set continuous outcomes (ecls_data) demonstrate application continuous outcomes. Throughout tutorial, cover key features capabilities pprof, presenting examples use cases illustrate functionality comprehensively.","code":""},{"path":"https://um-kevinhe.github.io/pprof/articles/pprof.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Getting Started with pprof","text":"","code":"require(\"devtools\") require(\"remotes\") remotes::install_github(\"UM-KevinHe/pprof\", ref = \"main\")"},{"path":"https://um-kevinhe.github.io/pprof/articles/pprof.html","id":"structure","dir":"Articles","previous_headings":"","what":"Structure","title":"Getting Started with pprof","text":"section presents structure workflow pprof package. Generally, datasets continuous outcomes, either fixed effect model random effect model can fitted, binary outcomes, current version supports fixed effect model. calculation standardized measures, indirect direct standardization methods provided models. Regarding hypothesis testing provider effects, pprof includes flagging based provider’s performance, categorizing 1 (statistically higher), 0 (expected), -1 (statistically lower). Confidence intervals provided provider effects standardized measures. Additionally, various visualizations equipped facilitate interpretation results. include caterpillar plots confidence intervals standardized measures, bar plots showing flagging percentages overall stratified provider sizes, funnel plots indirect standardized measures fixed effect models. visualizations offer multiple perspectives understanding results effectively.","code":""},{"path":"https://um-kevinhe.github.io/pprof/articles/pprof.html","id":"model-fitting","dir":"Articles","previous_headings":"","what":"Model Fitting","title":"Getting Started with pprof","text":"pprof package introduces three different fitting functions: logis_fe logistic fixed effect model, linear_fe linear fixed effect model, linear_re linear random effect mode. Throughout guide, simulated dataset, simulated dataset ExampleDataBinary included package used example. model function supports three different ways input data. Users flexibility choose one best suits data availability convenience. Firstly, users can provide formula whole dataset. Additionally, users also input whole dataset, along column names outcome vector, covariate matrix/data frame, provider identifier vector. Finally, function also accepts outcome vector, covariate matrix/data frame, provider identifier vector. default, model fitting function automatically removes observations containing missing values. users encounter data-related issues, can utilize built-function data_check perform data quality checks. function can assist examining missingness, variation, correlation, variance inflation factor (VIF) variables ensure data quality fitting model. logistic fixed effect model provides two algorithmic approaches: Serial Blockwise Inversion Newton (SerBIN) algorithm (See Logis FE details) Block Ascent Newton algorithm. preferred method can specified setting method argument, allowing users choose algorithm best fits computational needs model requirements.","code":"library(pprof) data(ExampleDataBinary) outcome <- ExampleDataBinary$Y covar <- ExampleDataBinary$Z ID <- ExampleDataBinary$ID data <- data.frame(outcome, covar, ID) formula_fe <- as.formula(\"outcome ~ id(ID) + z1 + z2 + z3 + z4 + z5\") fit_fe <- logis_fe(formula = formula_fe, data = data, message = F) colnames(data) #> [1] \"outcome\" \"z1\"      \"z2\"      \"z3\"      \"z4\"      \"z5\"      \"ID\" Y.char <- colnames(data)[1] Z.char <- colnames(data)[2:6] ID.char <- colnames(data)[7] fit_fe <- logis_fe(data = data, Y.char = Y.char, Z.char = Z.char, ID.char = ID.char, message = F) fit_fe <- logis_fe(Y = outcome, Z = covar, ID = ID, message = F)"},{"path":"https://um-kevinhe.github.io/pprof/articles/pprof.html","id":"standardized-measures","dir":"Articles","previous_headings":"","what":"Standardized Measures","title":"Getting Started with pprof","text":"Based results obtained fitted model, users can easily calculate direct indirect standardized measures per specific requirements. SM_output function simply necessitates users input object returned model functions specify desired type measure. Additionally, observed outcomes “expected” outcomes included case users wish calculate standardized measures different definitions.","code":"SR <- SM_output(fit_fe, stdz = \"indirect\")"},{"path":"https://um-kevinhe.github.io/pprof/articles/pprof.html","id":"hypothesis-testing-for-provider-effects","dir":"Articles","previous_headings":"","what":"Hypothesis Testing for Provider Effects","title":"Getting Started with pprof","text":"test function designed conduct hypothesis testing provider effects identify outlier providers. returns four-column dataframe, “flag” column indicates whether provider flagged outlier. three columns provide p-values, corresponding test statistics, standard errors provider effects. Users flexibility choose two-sided one-sided tests specifying alternative argument. cases number providers large, outputting results may become cumbersome. address , users can opt display results providers particular interest setting parm argument corresponding provider ID. selective output feature makes easier users focus specific providers without overwhelmed extensive data.","code":"test(fit_fe, parm = c(11:20, 60:65)) #>    flag      p value        stat #> 11    0 0.1031407301  1.62981440 #> 12    0 0.8210148768  0.22623985 #> 13    0 0.2744008465  1.09298395 #> 14    0 0.1370648282 -1.48681065 #> 15    0 0.8340344124  0.20953014 #> 16   -1 0.0299553164 -2.17068071 #> 17    0 0.0745112915  1.78346100 #> 18   -1 0.0361175315 -2.09560178 #> 19    0 0.5606615895  0.58185910 #> 20    0 0.9903105282  0.01214425 #> 60    0 0.4600111503 -0.73882849 #> 61    1 0.0004267554  3.52296022 #> 62    0 0.0677680598  1.82654599 #> 63    0 0.3526406608  0.92947947 #> 64    0 0.3894835561  0.86055432 #> 65    0 0.1026006595 -1.63237430"},{"path":"https://um-kevinhe.github.io/pprof/articles/pprof.html","id":"hypothesis-testing-for-covariate-coefficients","dir":"Articles","previous_headings":"","what":"Hypothesis Testing for Covariate Coefficients","title":"Getting Started with pprof","text":"Additionally, offer summary function provides test statistics covariate coefficients. output dataframe may include estimates, standard errors, p-values, confindence intervals.","code":"summary(fit_fe) #>     Estimate  Std.Error     Stat p value  CI.Lower CI.Upper #> z1 1.0512744 0.04179173 25.15508       0 0.9693641 1.133185 #> z2 1.0229572 0.04093213 24.99154       0 0.9427316 1.103183 #> z3 0.9918962 0.04035333 24.58028       0 0.9128051 1.070987 #> z4 1.0413031 0.04115101 25.30443       0 0.9606486 1.121958 #> z5 1.0930890 0.04173967 26.18825       0 1.0112808 1.174897"},{"path":"https://um-kevinhe.github.io/pprof/articles/pprof.html","id":"confidence-interval","dir":"Articles","previous_headings":"","what":"Confidence Interval","title":"Getting Started with pprof","text":"confidence intervals provider effects standardized measures can obtained function confint specifying value argument option. function return three-column data frame provides estimates, along corresponding upper lower bounds confidence intervals.","code":"confint(fit_fe, parm = c(55:60), option = \"gamma\") #>         gamma gamma.lower  gamma.upper #> 55 -1.4176768   -2.057409 -0.792812684 #> 56 -0.6624298   -1.239835 -0.091294432 #> 57 -0.6411525   -1.295789 -0.006435919 #> 58 -1.3264628   -1.966684 -0.699596625 #> 59 -0.8219975   -1.473821 -0.178134425 #> 60 -1.1748531   -1.834632 -0.526685839 confint(fit_fe, parm = c(80:85), option = \"SM\") #> $CI.indirect_ratio #>    indirect_ratio CI_ratio.lower CI_ratio.upper #> 80      0.6651076      0.4614515      0.8967515 #> 81      0.0000000      0.0000000      1.1422604 #> 82      1.0857752      0.8814482      1.3007155 #> 83      1.0965577      0.9548462      1.2299472 #> 84      1.1255589      0.9578273      1.2922141 #> 85      1.1540167      0.9741097      1.3352526 #>  #> $CI.indirect_rate #>    indirect_rate CI_rate.lower CI_rate.upper #> 80      25.78715      17.89112      34.76831 #> 81       0.00000       0.00000      44.28703 #> 82      42.09702      34.17498      50.43056 #> 83      42.51508      37.02073      47.68678 #> 84      43.63949      37.13631      50.10095 #> 85      44.74284      37.76760      51.76961"},{"path":"https://um-kevinhe.github.io/pprof/articles/pprof.html","id":"plotting","dir":"Articles","previous_headings":"","what":"Plotting","title":"Getting Started with pprof","text":"caterpillar plot type visualization used display confidence intervals estimated parameters, often employed identify outliers assess variability across groups providers. pprof, caterpillar_plot function used generate plots, providing clear representation standardized measures associated confidence intervals. use function, users need input dataframe returned built-confint function, option argument set “SM” ensure standardized measures visualized.  Additionally, bar plot also provided visualize overall flagging percentage, well percentages stratified provider sizes. providers divided specified number groups, set group_num argument, number providers approximately equal across groups. flagging percentage group displayed, giving insights variations provider performance. plot, users need input dataframe returned test function. visualization offers effective way interpret performance distribution across different provider groups.  current version pprof also supports funnel plot plot function, effective graphical tool identifying healthcare providers unusual performance. function can visualize indirect standardized differences linear fixed effect model indirect standardized ratios logistic fixed effect model, offering valuable insights variations provider performance.","code":"CI_SM <- confint(fit_fe, option = \"SM\") caterpillar_plot(CI_SM$CI.indirect_ratio, use_flag = T, errorbar_width = 0.5, errorbar_size = 1) test_df <- test(fit_fe) bar_plot(test_df, group_num = 4) plot(fit_fe, alpha = 0.05)"},{"path":"https://um-kevinhe.github.io/pprof/articles/pprof.html","id":"real-data-example-ecls_data","dir":"Articles","previous_headings":"","what":"Real Data Example ecls_data","title":"Getting Started with pprof","text":"section, show usage package analyzing Early Childhood Longitudinal Study (ECLS) dataset. use fifth-grade cross-sectional data, focusing students’ mathematical assessment scores continuous outcome, continuous predictor household income categorical predictor gender. Due small number observations schools, fit model using available observations exclude schools fewer five records generating caterpillat plot bar plot. ensures reliable interpretable graphical representation results.","code":"data(ecls_data) formula_ecls <- as.formula(\"Math_Score ~ Income + id(School_ID) + Child_Sex\") fit_ecls <- linear_fe(formula = formula_ecls, data = ecls_data) #> Input format: formula and data.  obs_counts <- table(ecls_data$School_ID) schools_with_5_or_more <- as.numeric(names(obs_counts[obs_counts >= 5]))  # Caterpillar Plot CI_ecls <- confint(fit_ecls, parm = schools_with_5_or_more) caterpillar_plot(CI_ecls$CI.indirect, use_flag = T) # Bar Plot test_ecls <- test(fit_ecls, parm = schools_with_5_or_more) bar_plot(test_ecls) # Funnel Plot plot(fit_ecls, alpha = 0.05)"},{"path":"https://um-kevinhe.github.io/pprof/articles/Quick-start.html","id":"data-preparation","dir":"Articles","previous_headings":"","what":"1. Data preparation","title":"Quick Start","text":"distinct data sets outcome (Y), covariate matrix (Z), provider identifiers (ID), can directly execute subsequent code data preparation. Otherwise can split data specifying variable names follows:","code":"data.prep <- fe_data_prep(Y, Z, ID) Y.char <- \"Y\" #example variable name for outcome in your dataset Z.char <- c(\"age\", \"gender\", \"edu\", ...) #example variable names for predictors in your dataset ID.char <- \"ID\" #example variable names for provider id in your dataset data.prep <- fe_data_prep(data[, Y.char], data[, Z.char], data[, ID.char]) # \"data\" is the name of your dataset"},{"path":"https://um-kevinhe.github.io/pprof/articles/Quick-start.html","id":"model-fitting","dir":"Articles","previous_headings":"","what":"2. Model fitting","title":"Quick Start","text":"","code":"fit <- logis_fe(data.prep)"},{"path":"https://um-kevinhe.github.io/pprof/articles/Quick-start.html","id":"obtain-the-estimate-of-covariate-coefficients-beta-and-provider-effects-gamma","dir":"Articles","previous_headings":"","what":"2.1 Obtain the estimate of covariate coefficients (\\(\\beta\\)) and provider effects (\\(\\gamma\\))","title":"Quick Start","text":"","code":"coef(fit)"},{"path":"https://um-kevinhe.github.io/pprof/articles/Quick-start.html","id":"obtain-the-indirect-standardized-ratiorate","dir":"Articles","previous_headings":"","what":"2.2 Obtain the indirect standardized ratio/rate","title":"Quick Start","text":"","code":"SR <- SR_output(fit)  SR$indirect.ratio SR$indirect.rate"},{"path":"https://um-kevinhe.github.io/pprof/articles/Quick-start.html","id":"testing-to-find-the-outlier-providers","dir":"Articles","previous_headings":"","what":"2.3 Testing to find the outlier providers","title":"Quick Start","text":"","code":"test_fe(fit)"},{"path":"https://um-kevinhe.github.io/pprof/articles/Quick-start.html","id":"obtain-the-confidence-interval-of-gamma","dir":"Articles","previous_headings":"","what":"2.4 Obtain the confidence interval of \\(\\gamma\\)","title":"Quick Start","text":"","code":"confint(fit, option = \"gamma\")"},{"path":"https://um-kevinhe.github.io/pprof/articles/Quick-start.html","id":"obtain-the-confidence-interval-of-indirect-standardized-ratiorate","dir":"Articles","previous_headings":"","what":"2.5 Obtain the confidence interval of indirect standardized ratio/rate","title":"Quick Start","text":"","code":"confint(fit, option = \"SR\")"},{"path":"https://um-kevinhe.github.io/pprof/articles/Quick-start.html","id":"obtain-the-test-and-confidence-interval-of-beta","dir":"Articles","previous_headings":"","what":"2.6 Obtain the test and confidence interval of \\(\\beta\\)","title":"Quick Start","text":"","code":"summary_fe_covar(fit)"},{"path":"https://um-kevinhe.github.io/pprof/articles/srrFE.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Getting Started with srrFE","text":"srrFE software package designed implement SerBIN method proposed Wu et al. (2022), specifically tailored address computational challenges inherent large-scale provider data. Additionally, package equipped functions designed estimate standardized ratios rates conduct hypothesis testing. vignette, explore fundamental usage functions integrated current R package. details, please see Reference section. learn algorithms employed srrFE, refer Models section see original articles. need concise guide quickly use package, please refer Quick Start.","code":""},{"path":"https://um-kevinhe.github.io/pprof/articles/srrFE.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Getting Started with srrFE","text":"","code":"require(\"devtools\") require(\"remotes\") remotes::install_github(\"UM-KevinHe/srrFE\", ref = \"main\")"},{"path":"https://um-kevinhe.github.io/pprof/articles/srrFE.html","id":"example","dir":"Articles","previous_headings":"","what":"Example","title":"Getting Started with srrFE","text":"employ simulated dataset contained current package illustrate utilize package data analysis. data named data_FE includes information : Y: binary outcome variable ID: provider identifiers Z: 4 continuous covariates","code":"library(srrFE) data(data_FE)"},{"path":"https://um-kevinhe.github.io/pprof/articles/srrFE.html","id":"data-preparation-function","dir":"Articles","previous_headings":"Example","what":"Data Preparation Function","title":"Getting Started with srrFE","text":"Typically, users employ fe_data_prep() function preprocess data. advise users review data consider making adjustments based output information necessary. (Please know subsequent functions used based processed data)","code":"data.prep <- fe_data_prep(data_FE$Y, data_FE$Z, data_FE$ID) #> Checking missingness of variables ... #> Missing values NOT found. Checking missingness of variables completed! #> Checking variation in covariates ... #> Checking variation in covariates completed! #> Checking pairwise correlation among covariates ... #> Checking pairwise correlation among covariates completed! #> Checking VIF of covariates ... #> Checking VIF of covariates completed! #> Warning: 0 out of 10 providers considered small and filtered out! #> 0 out of 10 remaining providers with no events. #> 0 out of 10 remaining providers with all events. #> After screening, 52% of all records exhibit occurrences of events (Y = 1) head(data.prep$data) #>    Y ID      Z1      Z2      Z3      Z4 included no.events all.events #> 38 1  1 -0.7124  0.3953 -0.8402  0.0840        1         0          0 #> 6  0  1  0.3660 -0.7654  1.8015 -0.5231        1         0          0 #> 2  0  1 -0.0715  0.3307 -0.1121 -0.3115        1         0          0 #> 32 1  1  1.2804 -0.7822  0.0941  0.7869        1         0          0 #> 34 0  1  0.4012 -0.5114  0.3514 -0.8059        1         0          0 #> 23 0  1  0.8727 -0.7320 -0.2893 -0.0106        1         0          0"},{"path":"https://um-kevinhe.github.io/pprof/articles/srrFE.html","id":"model-fitting","dir":"Articles","previous_headings":"Example","what":"Model Fitting","title":"Getting Started with srrFE","text":"logis_fe() function employed fit fixed effect model. first three argument positions function, users required supply object generated previous fe_data_prep() function. Users commonly utilize output obtain estimates provider effects covariate coefficients coef() function. firth’s bias-corrected estimate can obtained using logis_firth() function:","code":"fit_fe <- logis_fe(data.prep) coef(fit_fe) #> $gamma #>           gamma #> 1  -0.053509017 #> 2   0.772595018 #> 3  -1.389717213 #> 4   2.517923014 #> 5   0.272975840 #> 6  -0.436788388 #> 7   0.008545775 #> 8   0.304527080 #> 9   1.727970674 #> 10 -0.034881361 #>  #> $beta #>          beta #> Z1 -2.2958595 #> Z2 -1.2672733 #> Z3  0.5674081 #> Z4  3.4980033 fit_firth <- logis_firth(data.prep) coef(fit_firth) #> $gamma #>           gamma #> 1  -0.051239610 #> 2   0.729490799 #> 3  -1.308206549 #> 4   2.367502062 #> 5   0.256940614 #> 6  -0.414020789 #> 7   0.004970661 #> 8   0.292270213 #> 9   1.631117293 #> 10 -0.033041718 #>  #> $beta #>          beta #> Z1 -2.1576804 #> Z2 -1.1906649 #> Z3  0.5328585 #> Z4  3.2847309"},{"path":"https://um-kevinhe.github.io/pprof/articles/srrFE.html","id":"measures-output","dir":"Articles","previous_headings":"Example","what":"Measures Output","title":"Getting Started with srrFE","text":"Based results obtained fitted model, users can easily calculate direct indirect standardized rates ratios per specific requirements. SR_output() function simply necessitates users input object returned logis_fe() function specify desired type measure. default, indirect standardized rate indirect standardized ratio provided.","code":"SR <- SR_output(fit_fe) SR$indirect.rate #>    Indirect_standardized.rate #> 1                    49.50173 #> 2                    57.42488 #> 3                    35.61848 #> 4                    66.07510 #> 5                    52.93383 #> 6                    46.09943 #> 7                    50.19757 #> 8                    53.10285 #> 9                    62.11370 #> 10                   50.39159 SR$indirect.ratio #>    Indirect_standardized.ratio #> 1                    0.9519563 #> 2                    1.1043247 #> 3                    0.6849708 #> 4                    1.2706751 #> 5                    1.0179583 #> 6                    0.8865274 #> 7                    0.9653378 #> 8                    1.0212087 #> 9                    1.1944943 #> 10                   0.9690691"},{"path":"https://um-kevinhe.github.io/pprof/articles/srrFE.html","id":"hypothesis-testing-for-provider-effects","dir":"Articles","previous_headings":"Example","what":"Hypothesis Testing for Provider Effects","title":"Getting Started with srrFE","text":"test_fe() function provides hypothesis testing outcomes assist users identifying outlier providers extreme outcomes. function returns 3-column dataframe, “flag” column indicating whether provider flagged (0 denotes provider flagged, 1 -1 represents outlier providers based user’s data interpretation). last two columns contain p-values corresponding test statistics.","code":"test_poisbinom <- test_fe(fit_fe) test_poisbinom #>    flag            p       stat #> 1     0 6.624388e-01 -0.4365486 #> 2     0 1.965498e-01  1.2914439 #> 3    -1 1.264412e-03 -3.2239370 #> 4     1 1.547222e-05  4.3218560 #> 5     0 7.992864e-01  0.2542707 #> 6     0 2.577034e-01 -1.1318361 #> 7     0 7.828967e-01 -0.2755461 #> 8     0 7.678697e-01  0.2951626 #> 9     1 3.317876e-03  2.9366413 #> 10    0 7.044033e-01 -0.3793832"},{"path":"https://um-kevinhe.github.io/pprof/articles/srrFE.html","id":"hypothesis-testing-for-covariate-coefficients","dir":"Articles","previous_headings":"Example","what":"Hypothesis Testing for Covariate Coefficients","title":"Getting Started with srrFE","text":"Additionally, offer summary_fe_covar() function, provides test statistics covariate coefficients \\(\\beta\\). test statistics can calculated “wald test” (use \"wald.cpp\" \"wald\" option), “score test” (use \"score\" option), “likelihood ratio test” (use \"lr\" option). returned dataframe includes estimates covariate coefficients corresponding p-values. Furthermore, Wald test offers additional confidence intervals.","code":"summary_fe_covar(fit_fe) #>          beta   se.beta            p   CI.lower   CI.upper #> Z1 -2.2958595 0.2559326 2.950020e-19 -2.7974782 -1.7942409 #> Z2 -1.2672733 0.1927867 4.916271e-11 -1.6451282 -0.8894184 #> Z3  0.5674081 0.1744281 1.142086e-03  0.2255353  0.9092810 #> Z4  3.4980033 0.3371212 0.000000e+00  2.8372578  4.1587488"},{"path":"https://um-kevinhe.github.io/pprof/articles/srrFE.html","id":"confidence-interval-for-provider-effects","dir":"Articles","previous_headings":"Example","what":"Confidence Interval for Provider Effects","title":"Getting Started with srrFE","text":"confint() function can used provide confidence intervals provider effects (.e. \\(\\gamma_i\\)) providers selected tested. User needs explicitly specify option = \"gamma\". Users can choose method generating confidence intervals either \"exact\", \"wald\", \"score\" test. maintain consistency confidence interval (CI) previous test results, advisable use test option test_fe() confint() functions. Please note \"exact\" option test_fe() function corresponds \"exact.poisbinom\" option test_fe() function. returned data frame offers estimates provider effects, upper lower limits CIs (defaulting 95% confidence level sides).","code":"confint(fit_fe, option = \"gamma\") #>           gamma gamma.lower gamma.upper #> 1  -0.053509017  -0.9269014   0.8208674 #> 2   0.772595018  -0.1861332   1.7290101 #> 3  -1.389717213  -2.3996017  -0.4379263 #> 4   2.517923014   1.4561906   3.5755053 #> 5   0.272975840  -0.7196352   1.2802052 #> 6  -0.436788388  -1.4678909   0.5411435 #> 7   0.008545775  -0.9158587   0.9000023 #> 8   0.304527080  -0.7020479   1.3619158 #> 9   1.727970674   0.6661555   2.7870210 #> 10 -0.034881361  -0.9473625   0.8875052"},{"path":"https://um-kevinhe.github.io/pprof/articles/srrFE.html","id":"confidence-interval-for-measures","dir":"Articles","previous_headings":"Example","what":"Confidence Interval for Measures","title":"Getting Started with srrFE","text":"users interested CIs direct/indirect standardized rates ratios, confint() function can also used purpose explicitly specify option = \"SR\". Additionally, users input object returned logis_fe() function specify desired type measure. default, indirect standardized rate indirect standardized ratio provided. Similarly, function return three-column data frame provides estimate selected measure along corresponding upper lower bounds CIs.","code":"confint(fit_fe, option = \"SR\") #> $CI.indirect_ratio #>    indirect_ratio CI_ratio.lower CI_ratio.upper #> 1       0.9519563      0.7366397      1.1667814 #> 2       1.1043247      0.9460707      1.2635985 #> 3       0.6849708      0.5249067      0.8728793 #> 4       1.2706751      1.1431082      1.3991743 #> 5       1.0179583      0.8787492      1.1516614 #> 6       0.8865274      0.7124129      1.0871900 #> 7       0.9653378      0.7435250      1.2105744 #> 8       1.0212087      0.8785469      1.1463036 #> 9       1.1944943      1.0654148      1.3240740 #> 10      0.9690691      0.8066190      1.1268870 #>  #> $CI.indirect_rate #>    indirect_rate CI_rate.lower CI_rate.upper #> 1       49.50173      38.30527      60.67263 #> 2       57.42488      49.19568      65.70712 #> 3       35.61848      27.29515      45.38972 #> 4       66.07510      59.44163      72.75706 #> 5       52.93383      45.69496      59.88639 #> 6       46.09943      37.04547      56.53388 #> 7       50.19757      38.66330      62.94987 #> 8       53.10285      45.68444      59.60779 #> 9       62.11370      55.40157      68.85185 #> 10      50.39159      41.94419      58.59812"},{"path":"https://um-kevinhe.github.io/pprof/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Yubo Shao. Author, maintainer. Wenbo Wu. Author. Kevin . Author. Tao Xu. Contributor.","code":""},{"path":"https://um-kevinhe.github.io/pprof/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Shao Y, Wu W, K (2024). pprof: Risk-adjusted Models, Standardized Measure Calculation, Hypothesis Testing Visualization Provider Profiling. R package version 1.3, https://github.com/UM-KevinHe/pprof.","code":"@Manual{,   title = {pprof: Risk-adjusted Models, Standardized Measure Calculation, Hypothesis Testing and Visualization for Provider Profiling},   author = {Yubo Shao and Wenbo Wu and Kevin He},   year = {2024},   note = {R package version 1.3},   url = {https://github.com/UM-KevinHe/pprof}, }"},{"path":"https://um-kevinhe.github.io/pprof/index.html","id":"pprof","dir":"","previous_headings":"","what":"Risk-adjusted Models, Standardized Measure Calculation, Hypothesis Testing and Visualization for Provider Profiling","title":"Risk-adjusted Models, Standardized Measure Calculation, Hypothesis Testing and Visualization for Provider Profiling","text":"pprof software package provides variety risk-adjusted models provider profiling, capable addressing computational challenges inherent large-scale provider data. also includes standardized measure calculations, hypothesis testing evaluate provider performance, visualization tools comprehensive analysis.","code":""},{"path":"https://um-kevinhe.github.io/pprof/index.html","id":"introduction","dir":"","previous_headings":"","what":"Introduction","title":"Risk-adjusted Models, Standardized Measure Calculation, Hypothesis Testing and Visualization for Provider Profiling","text":"Provider profiling involves assessing comparing performance healthcare providers evaluating specific metrics reflect quality care, efficiency, patient outcomes. achieve , essential fit statistical models design appropriate measures. developed pprof package facilitates fitting variety risk-adjusted models, includes tools calculating standardized measures, conducting statistical inference, visualizing results, thereby offering comprehensive solution provider profiling. package addresses key limitations found existing R functions, often struggle computational inefficiency applied large-scale provider data. logistic fixed effect model, introduced serial blockwise inversion Newton (SerBIN) algorithm, leverages block structure information matrix. linear fixed effect models, employed profile-based method, improve computational speed significantly. improvements, along parallel computing capabilities, ensure package reduces computational burden associated large datasets. Moreover, package highly versatile, accommodating different types outcomes integrating indirect direct standardization measures model. offering functionalities encompass model fitting post-modeling analysis, package provides complete user-friendly solution diverse needs provider profiling.","code":""},{"path":"https://um-kevinhe.github.io/pprof/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Risk-adjusted Models, Standardized Measure Calculation, Hypothesis Testing and Visualization for Provider Profiling","text":"Note: package still early stages development, please don’t hesitate report problems may experience. can install ‘pprof’ via CRAN github:","code":"require(\"devtools\") require(\"remotes\") remotes::install_github(\"UM-KevinHe/pprof\", ref = \"main\")"},{"path":"https://um-kevinhe.github.io/pprof/index.html","id":"getting-started","dir":"","previous_headings":"","what":"Getting started","title":"Risk-adjusted Models, Standardized Measure Calculation, Hypothesis Testing and Visualization for Provider Profiling","text":"detailed overview usage package, please see “tutorial”.","code":""},{"path":"https://um-kevinhe.github.io/pprof/index.html","id":"getting-help","dir":"","previous_headings":"","what":"Getting Help","title":"Risk-adjusted Models, Standardized Measure Calculation, Hypothesis Testing and Visualization for Provider Profiling","text":"encounter problems bugs, please contact us : xhliuu@umich.edu, lfluo@umich.edu, kevinhe@umich.edu.","code":""},{"path":"https://um-kevinhe.github.io/pprof/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"Risk-adjusted Models, Standardized Measure Calculation, Hypothesis Testing and Visualization for Provider Profiling","text":"[1] Bates, D., Mächler, M., Bolker, B., & Walker, S. (2015). Fitting linear mixed-effects models using lme4. Journal Statistical Software, 67(1), 1-48. https://doi.org/10.18637/jss.v067.i01 [2] , K., Kalbfleisch, J. D., Li, Y., & Li, Y. (2013). Evaluating hospital readmission rates dialysis facilities; adjusting hospital effects. Lifetime Data Analysis, 19, 490-512. https://link.springer.com/article/10.1007/s10985-013-9264-6 [3] , K. (2019). Indirect direct standardization evaluating transplant centers. Journal Hospital Administration, 8(1), 9-14. https://www.sciedupress.com/journal/index.php/jha/article/view/14304 [4] Hsiao, C. (2022). Analysis panel data (. 64). Cambridge University Press. [5] Wu, W., Yang, Y., Kang, J., & , K. (2022). Improving large‐scale estimation inference profiling health care providers. Statistics Medicine, 41(15), 2840-2853. https://onlinelibrary.wiley.com/doi/full/10.1002/sim.938) [6] Wu, W., Kuriakose, J. P., Weng, W., Burney, R. E., & , K. (2023). Test-specific funnel plots healthcare provider profiling leveraging individual- summary-level information. Health Services Outcomes Research Methodology, 23, 45-58. https://pubmed.ncbi.nlm.nih.gov/37621728/","code":""},{"path":"https://um-kevinhe.github.io/pprof/reference/bar_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a bar plot for flags of each provider — bar_plot","title":"Get a bar plot for flags of each provider — bar_plot","text":"Generate bar plot flagging percentage overall stratified provider sizes.","code":""},{"path":"https://um-kevinhe.github.io/pprof/reference/bar_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a bar plot for flags of each provider — bar_plot","text":"","code":"bar_plot(   flag_df,   group_num = 4,   bar_colors = c(\"#66c2a5\", \"#fc8d62\", \"#8da0cb\"),   bar_width = 0.7,   theme = theme_minimal(),   label_color = \"black\",   label_size = 4 )"},{"path":"https://um-kevinhe.github.io/pprof/reference/bar_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a bar plot for flags of each provider — bar_plot","text":"flag_df data frame test function containing flag provider. group_num number groups providers divided based sample sizes. default 4. bar_colors vector colors used fill bars representing categories. default c(\"#66c2a5\", \"#fc8d62\", \"#8da0cb\"). bar_width width bars bar chart. default 0.7. theme theme plot. default theme_minimal(). label_color color text labels inside bars. default \"black\". label_size size text labels inside bars. default 4.","code":""},{"path":"https://um-kevinhe.github.io/pprof/reference/bar_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a bar plot for flags of each provider — bar_plot","text":"ggplot object representing bar chart flagging results.","code":""},{"path":"https://um-kevinhe.github.io/pprof/reference/bar_plot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get a bar plot for flags of each provider — bar_plot","text":"function generates bar chart visualize percentage flagging results based provider sizes. input data frame test_df must output package pprof's test function. Providers grouped specified number groups (group_num) based sample sizes, number providers approximately equal across groups. additional \"overall\" group included show flagging results across providers.","code":""},{"path":[]},{"path":"https://um-kevinhe.github.io/pprof/reference/bar_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a bar plot for flags of each provider — bar_plot","text":"","code":"data(ExampleDataLinear) outcome <- ExampleDataLinear$Y covar <- ExampleDataLinear$Z ID <- ExampleDataLinear$ID fit_linear <- linear_fe(Y = outcome, Z = covar, ID = ID) #> Input format: Y, Z, and ID. test_linear <- test(fit_linear) bar_plot(test_linear)   data(ExampleDataBinary) fit_logis <- logis_fe(Y = ExampleDataBinary$Y, Z = ExampleDataBinary$Z, ID = ExampleDataBinary$ID, message = FALSE) test_logis <- test(fit_logis) bar_plot(test_logis)"},{"path":"https://um-kevinhe.github.io/pprof/reference/caterpillar_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a caterpillar plot for standardized measures — caterpillar_plot","title":"Get a caterpillar plot for standardized measures — caterpillar_plot","text":"Generates caterpillar plot standardized measures different models using provided CI dataframe.","code":""},{"path":"https://um-kevinhe.github.io/pprof/reference/caterpillar_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a caterpillar plot for standardized measures — caterpillar_plot","text":"","code":"caterpillar_plot(   CI,   theme = theme_bw(),   point_size = 2,   point_color = \"#475569\",   refline_value = NULL,   refline_color = \"#64748b\",   refline_size = 1,   refline_type = \"dashed\",   errorbar_width = 0,   errorbar_size = 0.5,   errorbar_alpha = 0.5,   errorbar_color = \"#94a3b8\",   use_flag = FALSE,   flag_color = c(\"#E69F00\", \"#56B4E9\", \"#009E73\") )"},{"path":"https://um-kevinhe.github.io/pprof/reference/caterpillar_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a caterpillar plot for standardized measures — caterpillar_plot","text":"CI dataframe confint function containing standardized measure values, along confidence intervals lower upper bounds. theme theme plot. default theme_bw(). point_size size points caterpillar plot. default value 2. point_color color points plot. default value \"#475569\". refline_value value horizontal reference line, standardized measures compared. default value NULL. refline_color color reference line. default value \"#64748b\". refline_size size reference line. default value 1. refline_type line type reference line. default value \"dashed\". errorbar_width width error bars (horizontal ends CI bars). default value 0. errorbar_size thickness error bars. default value 0.5. errorbar_alpha transparency level error bars. value 0 1, 0 completely transparent 1 fully opaque. default value 0.5. errorbar_color color error bars. default value \"#94a3b8\". use_flag logical; TRUE, error bars colored show providers' flags based performance. default FALSE. flag_color vector colors used flagging providers use_flag = TRUE. default value c(\"#E69F00\", \"#56B4E9\", \"#009E73\").","code":""},{"path":"https://um-kevinhe.github.io/pprof/reference/caterpillar_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a caterpillar plot for standardized measures — caterpillar_plot","text":"ggplot object caterpillar plot standardized measures.","code":""},{"path":"https://um-kevinhe.github.io/pprof/reference/caterpillar_plot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get a caterpillar plot for standardized measures — caterpillar_plot","text":"function creates caterpillar plot visualize standardized measures (indirect direct). input CI must dataframe output package pprof's confint function. provider's standardized measure value represented point, reference line shown value specified refline_value (default NULL). refline_value specified, linear FE RE models indirect direct standardized differences, set 0; logistic FE models indirect direct ratios, set 1; logistic FE indirect direct rates, set population rate, represents average rate across observations. Confidence intervals (CI) displayed error bars: alternative = \"two.sided\", two-sided confidence intervals shown; alternative = \"greater\", error bar extends lower bound standardized measure values; alternative = \"less\", extends standardized measure values upper bound. use_flag = TRUE, plot use colors specified flag_color show flags providers. error bar colored reflect flag, making easy identify providers different performance levels. use_flag = FALSE, error bars color, specified errorbar_color. provides simpler visualization without flagging individual providers.","code":""},{"path":[]},{"path":"https://um-kevinhe.github.io/pprof/reference/caterpillar_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a caterpillar plot for standardized measures — caterpillar_plot","text":"","code":"data(ExampleDataLinear) outcome <- ExampleDataLinear$Y covar <- ExampleDataLinear$Z ID <- ExampleDataLinear$ID fit_linear <- linear_fe(Y = outcome, Z = covar, ID = ID) #> Input format: Y, Z, and ID. CI_linear <- confint(fit_linear) caterpillar_plot(CI_linear$CI.indirect, use_flag =T, errorbar_width = 0.5, errorbar_size = 1)   data(ExampleDataBinary) fit_logis <- logis_fe(Y = ExampleDataBinary$Y, Z = ExampleDataBinary$Z, ID = ExampleDataBinary$ID, message = FALSE) CI_logis <- confint(fit_logis) caterpillar_plot(CI_logis$CI.indirect_ratio, use_flag =T, errorbar_width = 0.5, errorbar_size = 1)"},{"path":"https://um-kevinhe.github.io/pprof/reference/coef.logis_fe.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract coefficients from a logis_fe object. — coef.logis_fe","title":"Extract coefficients from a logis_fe object. — coef.logis_fe","text":"Extract coefficients logis_fe object.","code":""},{"path":"https://um-kevinhe.github.io/pprof/reference/coef.logis_fe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract coefficients from a logis_fe object. — coef.logis_fe","text":"","code":"# S3 method for logis_fe coef(fit, ...)"},{"path":"https://um-kevinhe.github.io/pprof/reference/coef.logis_fe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract coefficients from a logis_fe object. — coef.logis_fe","text":"fit object output logis_fe function. ...","code":""},{"path":"https://um-kevinhe.github.io/pprof/reference/coef.logis_fe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract coefficients from a logis_fe object. — coef.logis_fe","text":"","code":"data(data_FE) data.prep <- fe_data_prep(data_FE$Y, data_FE$Z, data_FE$ID, message = FALSE) fit_fe <- logis_fe(data.prep) coef(fit_fe) #> $gamma #>           gamma #> 1  -0.053509017 #> 2   0.772595018 #> 3  -1.389717213 #> 4   2.517923014 #> 5   0.272975840 #> 6  -0.436788388 #> 7   0.008545775 #> 8   0.304527080 #> 9   1.727970674 #> 10 -0.034881361 #>  #> $beta #>          beta #> Z1 -2.2958595 #> Z2 -1.2672733 #> Z3  0.5674081 #> Z4  3.4980033 #>"},{"path":"https://um-kevinhe.github.io/pprof/reference/confint.linear_fe.html","id":null,"dir":"Reference","previous_headings":"","what":"Get confidence intervals for provider effects or standardized measures — confint.linear_fe","title":"Get confidence intervals for provider effects or standardized measures — confint.linear_fe","text":"Provide confidence intervals provider effects standardized measures fixed effect linear model.","code":""},{"path":"https://um-kevinhe.github.io/pprof/reference/confint.linear_fe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get confidence intervals for provider effects or standardized measures — confint.linear_fe","text":"","code":"# S3 method for linear_fe confint(   fit,   parm,   level = 0.95,   option = \"SM\",   stdz = \"indirect\",   null = \"median\",   alternative = \"two.sided\" )"},{"path":"https://um-kevinhe.github.io/pprof/reference/confint.linear_fe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get confidence intervals for provider effects or standardized measures — confint.linear_fe","text":"fit model fitted linear_fe. parm specify subset providers confidence intervals given. default, providers included. class parm match class provider IDs. level confidence level. default value 0.95. option character string specifying whether confidence intervals provided provider effects standardized measures: \"gamma\" provider effect (supports \"two.sided\" confidence interval). \"SM\" standardized measures. stdz character string vector specifying standardization method option includes \"SM\". See stdz argument SM_output.linear_fe. null character string number specifying population norm calculating standardized measures option includes \"SM\". See null argument SM_output.linear_fe. alternative character string specifying alternative hypothesis, must one \"two.sided\" (default), \"greater\", \"less\". Note \"gamma\" argument option supports \"two.sided\".","code":""},{"path":"https://um-kevinhe.github.io/pprof/reference/confint.linear_fe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get confidence intervals for provider effects or standardized measures — confint.linear_fe","text":"list data frames containing confidence intervals based values option stdz. CI.gamma Confidence intervals provider effects option includes \"gamma\". CI.indirect Confidence intervals indirect standardized differences option includes \"SM\" stdz includes \"indirect\". CI.direct Confidence intervals direct standardized differences option includes \"SM\" stdz includes \"direct\".","code":""},{"path":"https://um-kevinhe.github.io/pprof/reference/confint.linear_fe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get confidence intervals for provider effects or standardized measures — confint.linear_fe","text":"","code":"data(ExampleDataLinear) outcome <- ExampleDataLinear$Y covar <- ExampleDataLinear$Z ID <- ExampleDataLinear$ID fit_linear <- linear_fe(Y = outcome, Z = covar, ID = ID) #> Input format: Y, Z, and ID. confint(fit_linear) #> $CI.indirect #>     Indirect.Difference indirect.Lower indirect.Upper #> 1          -0.370387492   -0.578496218    -0.16227877 #> 2          -0.864439821   -1.081249351    -0.64763029 #> 3          -0.707620305   -0.932825548    -0.48241506 #> 4           0.276001179    0.047772912     0.50422945 #> 5           0.263906784    0.048407294     0.47940627 #> 6           0.545099160    0.325596241     0.76460208 #> 7          -0.075159001   -0.303387269     0.15306927 #> 8          -0.000910955   -0.235569446     0.23374754 #> 9           0.034446109   -0.187853139     0.25674536 #> 10         -0.104258253   -0.326557501     0.11804099 #> 11         -0.446719918   -0.676506076    -0.21693376 #> 12          0.272124885    0.046919642     0.49733013 #> 13         -0.389098903   -0.608601822    -0.16959598 #> 14         -0.536111775   -0.781523500    -0.29070005 #> 15          0.239984666    0.017685419     0.46228391 #> 16          0.709655905    0.462304136     0.95700767 #> 17         -0.204927425   -0.441280223     0.03142537 #> 18         -0.559891638   -0.786593278    -0.33319000 #> 19          0.305127819    0.082828571     0.52742707 #> 20         -0.349044122   -0.563257037    -0.13483121 #> 21          0.539809597    0.305151106     0.77446809 #> 22         -0.066203547   -0.285706466     0.15329937 #> 23          0.170000547   -0.075411177     0.41541227 #> 24         -0.287521481   -0.508409291    -0.06663367 #> 25          0.615940315    0.405453126     0.82642750 #> 26         -0.319395397   -0.529882586    -0.10890821 #> 27          0.561550115    0.333321847     0.78977838 #> 28          0.503528347    0.293041158     0.71401554 #> 29         -0.075355715   -0.290855206     0.14014378 #> 30         -0.248823513   -0.463036428    -0.03461060 #> 31          0.073722417   -0.151482826     0.29892766 #> 32         -0.497946595   -0.717449514    -0.27844368 #> 33          0.089175592   -0.127633938     0.30598512 #> 34         -0.407584532   -0.628472342    -0.18669672 #> 35         -0.301273818   -0.527975458    -0.07457218 #> 36         -0.356371875   -0.569320986    -0.14342276 #> 37         -0.581289472   -0.790577294    -0.37200165 #> 38         -0.317345556   -0.547131714    -0.08755940 #> 39          0.372819229    0.164710503     0.58092796 #> 40         -0.965013385   -1.193241653    -0.73678512 #> 41          0.876132354    0.628780586     1.12348412 #> 42         -0.581068848   -0.836667929    -0.32546977 #> 43          0.309689704    0.091545949     0.52783346 #> 44          0.029360968   -0.178747758     0.23746969 #> 45         -0.125427582   -0.330115109     0.07925995 #> 46         -0.237415644   -0.464117284    -0.01071400 #> 47          0.252593359    0.034449604     0.47073711 #> 48          0.658136650    0.452327538     0.86394576 #> 49         -0.281625478   -0.493332893    -0.06991806 #> 50          0.171954742   -0.057831416     0.40174090 #> 51          0.402203905    0.197516377     0.60689143 #> 52         -0.435091528   -0.668091634    -0.20209142 #> 53          0.064973790   -0.158764303     0.28871188 #> 54          0.721207770    0.510720581     0.93169496 #> 55          0.045288463   -0.161660874     0.25223780 #> 56         -0.219211832   -0.453870323     0.01544666 #> 57          0.562919521    0.339181429     0.78665761 #> 58         -0.217467569   -0.414786020    -0.02014912 #> 59          0.479610640    0.249824482     0.70939680 #> 60          0.014263420   -0.231148305     0.25967514 #> 61         -0.341672988   -0.563972235    -0.11937374 #> 62          0.168812468   -0.047997062     0.38562200 #> 63          0.425351081    0.188998283     0.66170388 #> 64          0.112877281   -0.115350986     0.34110555 #> 65         -0.240767716   -0.468995984    -0.01253945 #> 66          0.113621679   -0.126232833     0.35347619 #> 67         -0.210017207   -0.438245475     0.01821106 #> 68         -0.377252972   -0.598140781    -0.15636516 #> 69          0.340108560    0.116370467     0.56384665 #> 70         -0.592022169   -0.823398562    -0.36064578 #> 71          0.359159317    0.148672128     0.56964651 #> 72         -0.577191699   -0.790140810    -0.36424259 #> 73          0.253202263    0.027997020     0.47840751 #> 74          0.161887778   -0.038490056     0.36226561 #> 75          0.329562851    0.125978768     0.53314693 #> 76         -0.474828215   -0.700033459    -0.24962297 #> 77          0.178203557   -0.088966888     0.44537400 #> 78          0.154776675   -0.048807408     0.35836076 #> 79         -0.059867540   -0.283605633     0.16387055 #> 80         -0.001693390   -0.223992638     0.22060586 #> 81          0.757613642    0.544664531     0.97056275 #> 82          0.117947073   -0.101555846     0.33744999 #> 83         -0.547038800   -0.776824958    -0.31725264 #> 84          0.601429101    0.395619989     0.80723821 #> 85          0.231636139    0.029137846     0.43413443 #> 86         -0.593113354   -0.809922884    -0.37630382 #> 87          0.413513827    0.203026638     0.62400102 #> 88          0.000910955   -0.224294288     0.22611620 #> 89          0.668264685    0.467886851     0.86864252 #> 90         -0.052249693   -0.267749183     0.16324980 #> 91         -0.346328614   -0.582681412    -0.10997582 #> 92         -1.183652486   -1.408857730    -0.95844724 #> 93          0.670704078    0.446965985     0.89444217 #> 94         -0.135793277   -0.343902003     0.07231545 #> 95         -0.011371410   -0.232259219     0.20951640 #> 96         -0.139075317   -0.348363138     0.07021251 #> 97          0.308817383    0.057443371     0.56019139 #> 98         -0.244303261   -0.450112373    -0.03849415 #> 99          0.242067535    0.005714736     0.47842033 #> 100        -0.301230370   -0.515443284    -0.08701745 #>"},{"path":"https://um-kevinhe.github.io/pprof/reference/confint.linear_re.html","id":null,"dir":"Reference","previous_headings":"","what":"Get confidence intervals for provider effects or standardized measures — confint.linear_re","title":"Get confidence intervals for provider effects or standardized measures — confint.linear_re","text":"Provide confidence intervals provider effects standardized measures random effect linear model.","code":""},{"path":"https://um-kevinhe.github.io/pprof/reference/confint.linear_re.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get confidence intervals for provider effects or standardized measures — confint.linear_re","text":"","code":"# S3 method for linear_re confint(   fit,   parm,   level = 0.95,   option = \"SM\",   stdz = \"indirect\",   alternative = \"two.sided\" )"},{"path":"https://um-kevinhe.github.io/pprof/reference/confint.linear_re.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get confidence intervals for provider effects or standardized measures — confint.linear_re","text":"fit model fitted linear_re. parm specify subset providers confidence intervals given. default, providers included. class parm match class provider IDs. level confidence level. default value 0.95. option character string specifying whether confidence intervals provided provider effects standardized measures: \"alpha\" provider effect \"SM\" standardized measures stdz character string vector specifying standardization method option includes \"SM\". See stdz argument SM_output.linear_re. alternative character string specifying alternative hypothesis, must one \"two.sided\" (default), \"greater\", \"less\".","code":""},{"path":"https://um-kevinhe.github.io/pprof/reference/confint.linear_re.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get confidence intervals for provider effects or standardized measures — confint.linear_re","text":"list data frames containing confidence intervals based values option stdz. CI.alpha Confidence intervals provider effects option includes \"alpha\". CI.indirect Confidence intervals indirect standardized differences option includes \"SM\" stdz includes \"indirect\". CI.direct Confidence intervals direct standardized differences option includes \"SM\" stdz includes \"direct\".","code":""},{"path":"https://um-kevinhe.github.io/pprof/reference/confint.linear_re.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get confidence intervals for provider effects or standardized measures — confint.linear_re","text":"","code":"data(ExampleDataLinear) outcome <- ExampleDataLinear$Y ID <- ExampleDataLinear$ID covar <- ExampleDataLinear$Z  fit_re <- linear_re(Y = outcome, Z = covar, ID = ID) #> Input format: Y, Z, and ID. confint(fit_re) #> $CI.indirect #>     Indirect.Difference indirect.Lower indirect.Upper #> 1          -0.338240958   -0.539449411   -0.137032504 #> 2          -0.794389223   -1.003428639   -0.585349807 #> 3          -0.646058872   -0.862592005   -0.429525739 #> 4           0.260222333    0.041006319    0.479438347 #> 5           0.253447824    0.045583295    0.461312354 #> 6           0.511178626    0.299728406    0.722628846 #> 7          -0.061265301   -0.280481315    0.157950712 #> 8           0.006948695   -0.217946528    0.231843917 #> 9           0.038982628   -0.174963777    0.252929033 #> 10         -0.089775701   -0.303722106    0.124170705 #> 11         -0.403966192   -0.624561591   -0.183370793 #> 12          0.258342952    0.041809819    0.474876085 #> 13         -0.353891953   -0.565342173   -0.142441733 #> 14         -0.480798587   -0.715106075   -0.246491098 #> 15          0.228403421    0.014457016    0.442349827 #> 16          0.652245404    0.416251313    0.888239495 #> 17         -0.180256778   -0.406642134    0.046128578 #> 18         -0.508231543   -0.726093728   -0.290369358 #> 19          0.288147391    0.074200986    0.502093796 #> 20         -0.317763248   -0.524472482   -0.111054015 #> 21          0.501834328    0.276939105    0.726729550 #> 22         -0.054292981   -0.265743201    0.157157239 #> 23          0.161368104   -0.072939384    0.395675593 #> 24         -0.258343295   -0.471030623   -0.045655968 #> 25          0.580695732    0.377340130    0.784051334 #> 26         -0.290963078   -0.494318680   -0.087607476 #> 27          0.524245442    0.305029429    0.743461456 #> 28          0.475868844    0.272513242    0.679224446 #> 29         -0.062803193   -0.270667722    0.145061337 #> 30         -0.224160405   -0.430869638   -0.017451171 #> 31          0.074646030   -0.141887103    0.291179163 #> 32         -0.454060915   -0.665511135   -0.242610695 #> 33          0.088741486   -0.120297930    0.297780901 #> 34         -0.369611317   -0.582298645   -0.156923990 #> 35         -0.270597627   -0.488459812   -0.052735442 #> 36         -0.324613417   -0.530186406   -0.119040428 #> 37         -0.534115124   -0.736388605   -0.331841643 #> 38         -0.285213112   -0.505808511   -0.064617714 #> 39          0.354251227    0.153042773    0.555459681 #> 40         -0.881389857   -1.100605871   -0.662173844 #> 41          0.803002465    0.567008374    1.038996556 #> 42         -0.517811990   -0.760936092   -0.274687887 #> 43          0.293492361    0.083257910    0.503726813 #> 44          0.035110130   -0.166098324    0.236318584 #> 45         -0.110060527   -0.308172084    0.088051029 #> 46         -0.211669804   -0.429531989    0.006192381 #> 47          0.241146710    0.030912258    0.451381162 #> 48          0.621420984    0.422293071    0.820548897 #> 49         -0.255612145   -0.460067423   -0.051156867 #> 50          0.165658248   -0.054937151    0.386253647 #> 51          0.383515095    0.185403539    0.581626651 #> 52         -0.392390843   -0.615824976   -0.168956710 #> 53          0.068123077   -0.147105035    0.283351189 #> 54          0.679024992    0.475669390    0.882380594 #> 55          0.048869088   -0.151290986    0.249029162 #> 56         -0.192475634   -0.417370857    0.032419588 #> 57          0.525940998    0.310712886    0.741169110 #> 58         -0.197817532   -0.389225270   -0.006409795 #> 59          0.448000079    0.227404680    0.668595478 #> 60          0.020624157   -0.213683332    0.254931645 #> 61         -0.308840599   -0.522787004   -0.094894194 #> 62          0.163885562   -0.045153854    0.372924977 #> 63          0.397151882    0.170766527    0.623537238 #> 64          0.110659002   -0.108557011    0.329875016 #> 65         -0.215252603   -0.434468617    0.003963410 #> 66          0.110843986   -0.118612712    0.340300685 #> 67         -0.185974771   -0.405190784    0.033241243 #> 68         -0.341368033   -0.554055360   -0.128680706 #> 69          0.320761519    0.105533408    0.535989631 #> 70         -0.537901540   -0.759902694   -0.315900385 #> 71          0.342325491    0.138969889    0.545681093 #> 72         -0.528870103   -0.734443092   -0.323297114 #> 73          0.240576715    0.024043582    0.457109848 #> 74          0.159376193   -0.034820204    0.353572590 #> 75          0.315175243    0.118064638    0.512285848 #> 76         -0.431149420   -0.647682554   -0.214616287 #> 77          0.166323929   -0.086693344    0.419341202 #> 78          0.152830117   -0.044280488    0.349940722 #> 79         -0.047475404   -0.262703516    0.167752707 #> 80          0.005401941   -0.208544464    0.219348346 #> 81          0.711346301    0.505773312    0.916919290 #> 82          0.115364610   -0.096085610    0.326814830 #> 83         -0.495816092   -0.716411491   -0.275220693 #> 84          0.569053793    0.369925880    0.768181706 #> 85          0.223492669    0.027367995    0.419617343 #> 86         -0.543695052   -0.752734468   -0.334655636 #> 87          0.393472922    0.190117320    0.596828524 #> 88          0.008107068   -0.208426065    0.224640202 #> 89          0.633800387    0.439603990    0.827996785 #> 90         -0.041475064   -0.249339594    0.166389465 #> 91         -0.310329631   -0.536714987   -0.083944276 #> 92         -1.084831958   -1.301365091   -0.868298824 #> 93          0.625010127    0.409782015    0.840238239 #> 94         -0.119090926   -0.320299380    0.082117528 #> 95         -0.004338301   -0.217025628    0.208349026 #> 96         -0.123299039   -0.325572521    0.078974442 #> 97          0.287366666    0.047887139    0.526846194 #> 98         -0.219943853   -0.419071766   -0.020815940 #> 99          0.229334049    0.002948693    0.455719404 #> 100        -0.272865484   -0.479574718   -0.066156250 #>"},{"path":"https://um-kevinhe.github.io/pprof/reference/confint.logis_fe.html","id":null,"dir":"Reference","previous_headings":"","what":"Get confidence intervals for provider effects or standardized Mmeasures — confint.logis_fe","title":"Get confidence intervals for provider effects or standardized Mmeasures — confint.logis_fe","text":"Provide confidence intervals provider effects standardized measures fixed effect logistic model.","code":""},{"path":"https://um-kevinhe.github.io/pprof/reference/confint.logis_fe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get confidence intervals for provider effects or standardized Mmeasures — confint.logis_fe","text":"","code":"# S3 method for logis_fe confint(   fit,   parm,   level = 0.95,   test = \"exact\",   option = \"SM\",   stdz = \"indirect\",   null = \"median\",   measure = c(\"rate\", \"ratio\"),   alternative = \"two.sided\" )"},{"path":"https://um-kevinhe.github.io/pprof/reference/confint.logis_fe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get confidence intervals for provider effects or standardized Mmeasures — confint.logis_fe","text":"fit model fitted logis_fe. parm specify subset providers confidence intervals given. default, providers included. class parm match class provider IDs. level confidence level. default value 0.95. test character string specifying type testing method. default \"exact\". \"exact\" exact test. \"wald\" wald test. \"score\" score test. option character string specifying whether confidence intervals provided provider effects standardized measures: \"gamma\" provider effect. \"SM\" standardized measures. stdz character string vector specifying standardization method option = \"SM\". See stdz argument SM_output.logis_fe. null character string number defining population norm option = \"SM\". measure character string vector indicating whether output measure \"ratio\" \"rate\" option = \"SM\". \"rate\" \"ratio\" provided default. \"rate\" output standardized rate. \"rate\" restricted 0% - 100%. \"ratio\"  output standardized ratio. c(\"ratio\", \"rate\") output standardized rate ratio. alternative character string specifying alternative hypothesis, must one \"two.sided\" (default), \"greater\", \"less\".","code":""},{"path":"https://um-kevinhe.github.io/pprof/reference/confint.logis_fe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get confidence intervals for provider effects or standardized Mmeasures — confint.logis_fe","text":"dataframe (option = \"gamma\") list data frames (option = \"SM\") containing point estimate, lower upper bounds estimate.","code":""},{"path":"https://um-kevinhe.github.io/pprof/reference/confint.logis_fe.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get confidence intervals for provider effects or standardized Mmeasures — confint.logis_fe","text":"wald test invalid extreme providers (.e. provider effect goes infinity). suggest using score exact test generate confidence intervals.","code":""},{"path":"https://um-kevinhe.github.io/pprof/reference/confint.logis_fe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get confidence intervals for provider effects or standardized Mmeasures — confint.logis_fe","text":"","code":"data(ExampleDataBinary) outcome = ExampleDataBinary$Y covar = ExampleDataBinary$Z ID = ExampleDataBinary$ID  fit_fe <- logis_fe(Y = outcome, Z = covar, ID = ID, message = FALSE) confint(fit_fe, option = \"gamma\") #>            gamma gamma.lower  gamma.upper #> 1    -1.34797989  -2.0537002 -0.646004794 #> 2    -0.67625337  -1.4783625  0.108280207 #> 3    -1.28525031  -1.8934880 -0.687370098 #> 4    -0.67938233  -1.2797033 -0.086092562 #> 5    -0.99265740  -1.6883067 -0.306586937 #> 6    -0.81532974  -1.4691758 -0.158365019 #> 7    -0.87543592  -1.5047498 -0.261985376 #> 8    -1.00068080  -1.6532438 -0.357317086 #> 9    -2.01487404  -2.7118054 -1.356036731 #> 10   -0.03521049  -0.7151699  0.646111807 #> 11   -0.41361385  -1.0331518  0.199699393 #> 12   -0.85510502  -1.4958132 -0.220165172 #> 13   -0.53422603  -1.2356102  0.178346095 #> 14   -1.44522997  -2.1448296 -0.766708116 #> 15   -0.86171651  -1.4996089 -0.234152168 #> 16   -1.67040261  -2.3682618 -0.997904352 #> 17   -0.38402254  -0.9825887  0.203794375 #> 18   -1.68115574  -2.3994015 -0.975923171 #> 19   -0.76531946  -1.3164409 -0.218223501 #> 20   -0.92383165  -1.5190103 -0.328029770 #> 21   -0.31598883  -0.9757455  0.350997995 #> 22    2.10966982   0.3349658  5.209107007 #> 23   -0.79288236  -1.4900974 -0.096824052 #> 24   -1.45276650  -2.0803594 -0.839562234 #> 25   -1.52753761  -2.1798670 -0.905815116 #> 26   -0.93347260  -1.6273596 -0.247829872 #> 27   -0.61772976  -1.3071059  0.071794357 #> 28   -1.16019294  -1.7779386 -0.551318825 #> 29   -0.71185643  -1.3658122 -0.066162358 #> 30   -0.33318626  -0.9325393  0.265798379 #> 31   -0.77986366  -1.5054646 -0.062132886 #> 32   -1.17567914  -1.8019958 -0.558866645 #> 33   -1.14317960  -1.8612181 -0.441887844 #> 34   -1.10685453  -1.7255004 -0.497054091 #> 35   -0.36491386  -1.0532923  0.313468992 #> 36   -0.26419627  -0.9965540  0.491294276 #> 37   -1.41172803  -2.1378951 -0.712369181 #> 38   -1.58135752  -2.3192928 -0.889554893 #> 39   -1.21308490  -1.8726683 -0.572213081 #> 40  -10.71003595        -Inf -4.449114094 #> 41   -2.04040784  -2.8338347 -1.284182751 #> 42   -0.86612613  -1.5067837 -0.235425596 #> 43   -0.42229711  -1.0979568  0.254360346 #> 44   -1.49821614  -2.2055709 -0.815138939 #> 45   -0.28407706  -0.9057786  0.341775719 #> 46   -1.49373950  -2.1736451 -0.827343803 #> 47   -0.59024463  -1.2395408  0.051745937 #> 48   -1.70754053  -2.3941624 -1.048207588 #> 49   -8.08483094        -Inf -2.327590188 #> 50   -2.39811515  -3.2284479 -1.618721988 #> 51   -1.55619892  -2.2789772 -0.858229080 #> 52   -1.29496181  -2.0038880 -0.603276054 #> 53   -0.77298706  -1.4471202 -0.103876054 #> 54   -0.85328390  -1.6009438 -0.116481623 #> 55   -1.41767677  -2.0574086 -0.792812684 #> 56   -0.66242978  -1.2398346 -0.091294432 #> 57   -0.64115255  -1.2957887 -0.006435919 #> 58   -1.32646278  -1.9666843 -0.699596625 #> 59   -0.82199750  -1.4738207 -0.178134425 #> 60   -1.17485306  -1.8346318 -0.526685839 #> 61    0.22681516  -0.4295697  0.913826264 #> 62   -0.30464309  -0.9726764  0.373924824 #> 63   -0.58766599  -1.3127715  0.122904080 #> 64   -0.63497696  -1.3084996  0.028114194 #> 65   -1.56981768  -2.3580068 -0.800869968 #> 66   -0.93148088  -1.5457470 -0.315060646 #> 67   -1.37293507  -2.2276349 -0.564528600 #> 68   -0.87563371  -1.5238313 -0.231888314 #> 69   -1.24453551  -1.8737814 -0.628077460 #> 70   -1.37964221  -2.1055889 -0.677810694 #> 71   -1.13189518  -1.8252968 -0.455360436 #> 72   -2.27495244  -3.1825218 -1.444903513 #> 73   -1.45420261  -2.0742817 -0.847440975 #> 74   -1.83001701  -2.5858310 -1.112767866 #> 75   -0.11220514  -0.6757168  0.460139170 #> 76   -0.63525849  -1.2852645  0.009311440 #> 77   -1.55579587  -2.3180779 -0.830171360 #> 78   -0.60979649  -1.2215577  0.003150925 #> 79   -0.97870858  -1.6492041 -0.321498826 #> 80   -1.95822469  -2.7208826 -1.228884058 #> 81   -6.23331119        -Inf -0.768916759 #> 82   -0.67639817  -1.2911662 -0.072201714 #> 83   -0.51406360  -1.1155439  0.100016951 #> 84   -0.46296110  -1.0851628  0.160617546 #> 85   -0.39609871  -1.0184524  0.224715876 #> 86   -1.75831645  -2.5468001 -0.999400891 #> 87   -1.13991691  -1.7742716 -0.516148679 #> 88   -0.63843087  -1.1958845 -0.076366251 #> 89   -1.28315787  -1.9520393 -0.628462126 #> 90   -0.55396407  -1.2064798  0.090692052 #> 91   -0.61513058  -1.2592403  0.031179117 #> 92   -0.89304494  -1.5437139 -0.239978505 #> 93   -1.48728104  -2.2268665 -0.791843698 #> 94   -2.04000365  -2.8684329 -1.230668884 #> 95   -0.46827940  -1.0447749  0.112325167 #> 96    2.43108467   0.6994034  5.498454728 #> 97   -0.61918928  -1.2021864 -0.036281584 #> 98   -1.19743934  -1.9854846 -0.441504316 #> 99   -1.07806889  -1.6874791 -0.480059312 #> 100  -0.59084370  -1.2185063  0.033368998 confint(fit_fe, option = \"SR\") #> Error: Argument 'option' NOT as required!"},{"path":"https://um-kevinhe.github.io/pprof/reference/data_check.html","id":null,"dir":"Reference","previous_headings":"","what":"Data quality check — data_check","title":"Data quality check — data_check","text":"Conduct data quality check including checking missingness, variation, correlation VIF variables.","code":""},{"path":"https://um-kevinhe.github.io/pprof/reference/data_check.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data quality check — data_check","text":"","code":"data_check(Y, Z, ID)"},{"path":"https://um-kevinhe.github.io/pprof/reference/data_check.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data quality check — data_check","text":"Y numeric vector indicating outcome variable. Z matrix data frame representing covariates. ID numeric vector representing grouping identifier.","code":""},{"path":"https://um-kevinhe.github.io/pprof/reference/data_check.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data quality check — data_check","text":"return value, called side effects.","code":""},{"path":"https://um-kevinhe.github.io/pprof/reference/data_check.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Data quality check — data_check","text":"function performs following checks: MissingnessChecks missing values dataset provides summary missing data. VariationIdentifies covariates zero near-zero variance might affect model stability. CorrelationAnalyzes pairwise correlation among covariates highlights highly correlated pairs. VIFComputes Variable Inflation Factors identify covariates potential multicollinearity issues. issues arise using model functions logis_fe, linear_fe linear_re, function can called data quality checking purposes.","code":""},{"path":"https://um-kevinhe.github.io/pprof/reference/data_FE.html","id":null,"dir":"Reference","previous_headings":"","what":"Example dataset — data_FE","title":"Example dataset — data_FE","text":"simulated data set containing response variable, provider information 4 continuous covariates.","code":""},{"path":"https://um-kevinhe.github.io/pprof/reference/data_FE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example dataset — data_FE","text":"","code":"data(data_FE)"},{"path":"https://um-kevinhe.github.io/pprof/reference/data_FE.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example dataset — data_FE","text":"list containing following elements: Y vector represents binary outcome ID vector represents facility indicator (10 facilities total) Z data frame contains 4 continuous variables","code":""},{"path":"https://um-kevinhe.github.io/pprof/reference/data_FE.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example dataset — data_FE","text":"","code":"data(data_FE) head(data_FE$Y) #> [1] 1 0 1 0 0 1 head(data_FE$ID) #> [1] 3 3 5 3 7 9 head(data_FE$Z) #>          Z1     Z2      Z3      Z4 #> 129 -1.0518 0.4805  1.1374  1.3395 #> 107 -1.0696 0.0053 -0.4353 -0.5918 #> 237 -0.6108 0.1098 -0.5248  1.4689 #> 131 -0.4967 0.9972  0.5019  0.3900 #> 331  1.5710 2.1165 -0.0759 -0.7802 #> 437 -1.1156 2.2503  0.1843  0.7020"},{"path":"https://um-kevinhe.github.io/pprof/reference/ecls_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Early Childhood Longitudinal Study Dataset — ecls_data","title":"Early Childhood Longitudinal Study Dataset — ecls_data","text":"Early Childhood Longitudinal Study (ECLS) dataset tracks 18,000 children kindergarten fifth grade, providing comprehensive student-level information. See Tourangeau et al. (2015) details.","code":""},{"path":"https://um-kevinhe.github.io/pprof/reference/ecls_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Early Childhood Longitudinal Study Dataset — ecls_data","text":"","code":"data(ecls_data)"},{"path":"https://um-kevinhe.github.io/pprof/reference/ecls_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Early Childhood Longitudinal Study Dataset — ecls_data","text":"data frame 9,101 observations, including: Child_ID Unique identifier child dataset. School_ID Identifier school dataset. Math_Score Continuous variable representing consolidated math proficiency score. Income Household income, categorized 18 ordinal levels, $5,000 less $200,000 . Treated continuous variable analysis. Child_Sex Binary variable indicating gender student.","code":""},{"path":"https://um-kevinhe.github.io/pprof/reference/ecls_data.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Early Childhood Longitudinal Study Dataset — ecls_data","text":"Available following website: https://nces.ed.gov/ecls/","code":""},{"path":"https://um-kevinhe.github.io/pprof/reference/ecls_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Early Childhood Longitudinal Study Dataset — ecls_data","text":"dataset includes fifth-grade cross-sectional data, focusing students' mathematical assessment scores primary outcome measure. mathematical assessment covers 18 topics number sense, properties, operations, measurement, geometry, data analysis, algebra. items evaluate students' competencies conceptual knowledge, procedural knowledge, problem-solving, consolidated single \"Math score.\" higher score indicates greater proficiency. primary predictors household income gender, gender categorical variable. Household income categorized 18 ordinal levels, ranging $5,000 less (level 1) $200,000 (level 18). analysis, income variable treated continuous variable. dataset removes records missing values consists 9,101 complete observations 2,275 schools.","code":""},{"path":"https://um-kevinhe.github.io/pprof/reference/ecls_data.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Early Childhood Longitudinal Study Dataset — ecls_data","text":"Tourangeau, K., C. Nord, T. Lˆe, . G. Sorongon, M. C. Hagedorn, P. Daly, M. Najarian (2015). Early childhood longitudinal study, kindergarten class 2010-11 (ecls-k: 2011): User’s manual ecls-k: 2011 kindergarten data file electronic codebook, public version. nces 2015-074. National Center Education Statistics.","code":""},{"path":"https://um-kevinhe.github.io/pprof/reference/ecls_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Early Childhood Longitudinal Study Dataset — ecls_data","text":"","code":"data(ecls_data) formula_FE <- as.formula(\"Math_Score ~ Income + id(School_ID) + Child_Sex\") fit_FE <- linear_fe(formula = formula_FE, data = ecls_data) #> Input format: formula and data.  formula_RE <- formula = as.formula(\"Math_Score ~ Income + (1|School_ID) + Child_Sex\") #> Error: object 'formula_RE' not found fit_RE <- linear_re(formula = formula_RE, data = ecls_data) #> Error: object 'formula_RE' not found"},{"path":"https://um-kevinhe.github.io/pprof/reference/ExampleDataBinary.html","id":null,"dir":"Reference","previous_headings":"","what":"Example data with binary outcomes — ExampleDataBinary","title":"Example data with binary outcomes — ExampleDataBinary","text":"simulated data set containing 7994 observations, 5 continuous covariates 100 providers.","code":""},{"path":"https://um-kevinhe.github.io/pprof/reference/ExampleDataBinary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example data with binary outcomes — ExampleDataBinary","text":"","code":"data(ExampleDataBinary)"},{"path":"https://um-kevinhe.github.io/pprof/reference/ExampleDataBinary.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example data with binary outcomes — ExampleDataBinary","text":"list containing following elements: Y vector representing binary outcomes 0 1. Generated Bernoulli distribution probability success (\\(\\boldsymbol{\\mu}\\)), determined applying logistic function linear combination provider effects covariates. ID vector representing identifier provider. number individuals per provider generated Poisson distribution mean 80, minimum value 11. Z data frame containing 5 continuous variables. Generated multivariate normal distribution, mean calculated \\((\\gamma_i - \\mu_{\\gamma}) \\cdot \\rho / \\sigma_{\\gamma}\\) \\(\\mu_{\\gamma} = \\log(4/11)\\) \\(\\sigma_{\\gamma} = 0.4\\), correlation covariates provider effects 0.1.","code":""},{"path":"https://um-kevinhe.github.io/pprof/reference/ExampleDataBinary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example data with binary outcomes — ExampleDataBinary","text":"","code":"data(ExampleDataBinary) head(ExampleDataBinary$Y) #> [1] 1 1 0 0 1 0 head(ExampleDataBinary$ID) #> [1] 1 1 1 1 1 1 head(ExampleDataBinary$Z) #>          z1         z2          z3          z4          z5 #> 1 0.4222353  1.2901256  0.18618604  1.45383568  0.54869608 #> 2 1.5952225 -0.6379755  0.95796887 -0.03400311  0.09561614 #> 3 0.7988354 -0.7243116  1.00367469 -1.22336606 -0.16760091 #> 4 0.4850902  1.4883909  0.35125182  0.72302769 -0.83167772 #> 5 1.2920051  0.6865298 -0.88208441  0.21011013  0.40801256 #> 6 0.4446510 -0.5466993  0.02647889 -2.35711231  0.42658309"},{"path":"https://um-kevinhe.github.io/pprof/reference/ExampleDataLinear.html","id":null,"dir":"Reference","previous_headings":"","what":"Example data with continuous outcomes — ExampleDataLinear","title":"Example data with continuous outcomes — ExampleDataLinear","text":"simulated data set containing 7901 observations, 5 continuous covariates 100 providers.","code":""},{"path":"https://um-kevinhe.github.io/pprof/reference/ExampleDataLinear.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example data with continuous outcomes — ExampleDataLinear","text":"","code":"data(ExampleDataLinear)"},{"path":"https://um-kevinhe.github.io/pprof/reference/ExampleDataLinear.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example data with continuous outcomes — ExampleDataLinear","text":"list containing following elements: Y vector representing continuous outcomes. Generated linear combination provider-specific effects, covariates, random error term (\\(\\epsilon\\)), \\(\\epsilon\\) follows normal distribution mean 0 standard deviation 1. ID vector representing identifier provider. number individuals per provider generated Poisson distribution mean 80. Z data frame containing 5 continuous variables. Generated multivariate normal distribution, mean calculated \\((\\gamma_i - \\mu_{\\gamma}) \\cdot \\rho / \\sigma_{\\gamma}\\) \\(\\mu_{\\gamma} = \\log(4/11)\\) \\(\\sigma_{\\gamma} = 0.4\\), correlation covariates provider effects 0.1.","code":""},{"path":"https://um-kevinhe.github.io/pprof/reference/ExampleDataLinear.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example data with continuous outcomes — ExampleDataLinear","text":"","code":"data(ExampleDataLinear) head(ExampleDataLinear$Y) #> [1]  2.341395  1.726385 -6.085487 -4.459568 -5.392451 -3.747529 head(ExampleDataLinear$ID) #> [1] 1 1 1 1 1 1 head(ExampleDataLinear$Z) #>           z1         z2          z3          z4          z5 #> 1  1.4371968  0.5030609  0.27799816  0.85035519  2.09705116 #> 2 -0.7367012  1.3282275  0.77115851  0.11971217  1.62687441 #> 3 -1.0977921  0.2010389 -1.33315545 -0.90291325 -1.17277380 #> 4 -0.1943289 -1.1456950 -1.55959090 -0.89686805 -1.00715112 #> 5 -1.3703641 -0.9746820 -0.05484035 -0.22093583 -0.73052043 #> 6 -0.4016549 -1.7874646 -1.54723763 -0.06955694 -0.01465253"},{"path":"https://um-kevinhe.github.io/pprof/reference/fe_data_prep.html","id":null,"dir":"Reference","previous_headings":"","what":"Data preparation before modelling — fe_data_prep","title":"Data preparation before modelling — fe_data_prep","text":"Data preparation modelling","code":""},{"path":"https://um-kevinhe.github.io/pprof/reference/fe_data_prep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data preparation before modelling — fe_data_prep","text":"","code":"fe_data_prep(Y, Z, ID, cutoff = 10, check = TRUE, message = TRUE)"},{"path":"https://um-kevinhe.github.io/pprof/reference/fe_data_prep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data preparation before modelling — fe_data_prep","text":"Y numerical vector, values 0 1, indicating outcome variable. Z matrix data frame containing covariates. ID vector representing provider id. elements can either numeric values characters. cutoff integer cutoff provider size 10 default. Providers observations fewer \"cutoff\" value labeled \"include = 0\". check Boolean indicating whether checking missingness, variation, correlation VIF variables data. Defaulting \"TRUE\". message Boolean indicating whether printing information data preparation process. Defaulting \"TRUE\". ...","code":""},{"path":"https://um-kevinhe.github.io/pprof/reference/fe_data_prep.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data preparation before modelling — fe_data_prep","text":"data sorted data frame including response, provider identifiers, covariates, additional provider information. char_list list including variable names.","code":""},{"path":"https://um-kevinhe.github.io/pprof/reference/fe_data_prep.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Data preparation before modelling — fe_data_prep","text":"Major steps stage include (order): checking missingness, variation, correlation VIF variables data, provider screening based provider size, 10 default, reporting proportions providers events (.e. \"0\" outcomes) events (.e. \"1\" outcomes), sorting data provider identifiers. fe_data_prep() function returns data sorted provider identifiers, accompanied additional provider-related information indicating whether provider's size exceeds specified \"cutoff\" whether respective provider experienced either zero events. reason behind introducing \"cutoff\" lies findings simulated real data studies, revealing instability coefficient estimates providers small sizes. Consequently, recommend excluding small providers model fitting process. important note resultant data frame retains providers, including small ones, utilizes \"included = 0\" label signify small providers. Subsequently, model fitting stage, logis_fe() function disregards records marked \"included = 0\".","code":""},{"path":"https://um-kevinhe.github.io/pprof/reference/fe_data_prep.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data preparation before modelling — fe_data_prep","text":"","code":"data(data_FE) data.prep <- fe_data_prep(data_FE$Y, data_FE$Z, data_FE$ID) #> Checking missingness of variables ...  #> Missing values NOT found. Checking missingness of variables completed! #> Checking variation in covariates ...  #> Checking variation in covariates completed! #> Checking pairwise correlation among covariates ...  #> Checking pairwise correlation among covariates completed! #> Checking VIF of covariates ...  #> Checking VIF of covariates completed! #> Warning: 0 out of 10 providers considered small and filtered out! #> 0 out of 10 remaining providers with no events. #> 0 out of 10 remaining providers with all events. #> After screening, 52% of all records exhibit occurrences of events (Y = 1) head(data.prep$data) #>    Y ID      Z1      Z2      Z3      Z4 included no.events all.events #> 38 1  1 -0.7124  0.3953 -0.8402  0.0840        1         0          0 #> 6  0  1  0.3660 -0.7654  1.8015 -0.5231        1         0          0 #> 2  0  1 -0.0715  0.3307 -0.1121 -0.3115        1         0          0 #> 32 1  1  1.2804 -0.7822  0.0941  0.7869        1         0          0 #> 34 0  1  0.4012 -0.5114  0.3514 -0.8059        1         0          0 #> 23 0  1  0.8727 -0.7320 -0.2893 -0.0106        1         0          0 data.prep$char_list #> $Y.char #> [1] \"Y\" #>  #> $prov.char #> [1] \"ID\" #>  #> $Z.char #> [1] \"Z1\" \"Z2\" \"Z3\" \"Z4\" #>"},{"path":"https://um-kevinhe.github.io/pprof/reference/linear_fe.html","id":null,"dir":"Reference","previous_headings":"","what":"Main Function for Fitting the Fixed Effect Linear Model — linear_fe","title":"Main Function for Fitting the Fixed Effect Linear Model — linear_fe","text":"Fit fixed effect linear model via profile likelihood dummy encoding.","code":""},{"path":"https://um-kevinhe.github.io/pprof/reference/linear_fe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Main Function for Fitting the Fixed Effect Linear Model — linear_fe","text":"","code":"linear_fe(   formula = NULL,   data = NULL,   Y = NULL,   Z = NULL,   ID = NULL,   Y.char = NULL,   Z.char = NULL,   ID.char = NULL,   method = \"pl\" )"},{"path":"https://um-kevinhe.github.io/pprof/reference/linear_fe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Main Function for Fitting the Fixed Effect Linear Model — linear_fe","text":"formula two-sided formula object describing model fitted, response variable left ~ operator covariates right, separated + operators. fixed effect provider identifier specified using id(). data data frame containing variables named formula, columns specified Y.char, Z.char, ID.char. Y numeric vector representing response variable. Z matrix data frame representing covariates, can include numeric categorical variables. ID numeric vector representing provider identifier. Y.char character string specifying column name response variable data. Z.char character vector specifying column names covariates data. ID.char character string specifying column name provider identifier data. method character string specifying method fit model. \"pl\" (default) uses profile likelihood fit model,. \"dummy\" calls lm fit model using dummy variables provider identifier","code":""},{"path":"https://um-kevinhe.github.io/pprof/reference/linear_fe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Main Function for Fitting the Fixed Effect Linear Model — linear_fe","text":"list objects S3 class \"linear_fe\": coefficient list containing estimated coefficients: beta, fixed effects predictor, gamma, effect provider. variance list containing variance estimates: beta, variance-covariance matrix predictor coefficients, gamma, variance provider effects. sigma residual standard error. fitted fitted values individual. observation original response individual. residuals residuals individual, response minus fitted values linear_pred linear predictor individual. data_include data used fit model, sorted provider identifier. categorical covariates, includes dummy variables created categories except reference level. char_list list character vectors representing column names response variable, covariates, provider identifier. categorical variables, names reflect dummy variables created category. method method used model fitting, either \"Profile Likelihood\" \"Dummy\". neg2Loglkd log likelihood AIC Akaike info criterion BIC Bayesian info criterion","code":""},{"path":"https://um-kevinhe.github.io/pprof/reference/linear_fe.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Main Function for Fitting the Fixed Effect Linear Model — linear_fe","text":"function used fit fixed effect linear model form: $$Y_{ij} = \\gamma_i + \\mathbf{Z}_{ij}^\\top\\boldsymbol\\beta + \\epsilon_{ij}$$ \\(Y_{ij}\\) continuous outcome individual \\(j\\) provider \\(\\), \\(\\gamma_i\\) provider-specific effect, \\(\\mathbf{Z}_{ij}\\) covariates, \\(\\boldsymbol\\beta\\) vector coefficients covariates. default method fitting model profile likelihood, dummy encoding can also used specifying appropriate method. number providers large, recommend using profile likelihood method, significantly faster dummy encoding. function accepts three different input formats: formula dataset, formula form response ~ covariates + id(provider), provider representing provider identifier; dataset along column names response, covariates, provider identifier; outcome vector \\(\\boldsymbol{Y}\\), covariate matrix data frame \\(\\mathbf{Z}\\), provider identifier vector \\(\\boldsymbol{\\gamma}\\). issues arise model fitting, consider using data_check function perform data quality check, can help identify missing values, low variation covariates, high-pairwise correlation, multicollinearity. datasets missing values, function automatically removes observations (rows) missing values fitting model.","code":""},{"path":"https://um-kevinhe.github.io/pprof/reference/linear_fe.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Main Function for Fitting the Fixed Effect Linear Model — linear_fe","text":"Hsiao, C. (2022). Analysis panel data (. 64). Cambridge university press. R Core Team (2023). R Stats Package: lm. Available : https://stat.ethz.ch/R-manual/R-devel/library/stats/html/lm.html","code":""},{"path":[]},{"path":"https://um-kevinhe.github.io/pprof/reference/linear_fe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Main Function for Fitting the Fixed Effect Linear Model — linear_fe","text":"","code":"data(ExampleDataLinear) Y <- ExampleDataLinear$Y Z <- ExampleDataLinear$Z ID <- ExampleDataLinear$ID data <- data.frame(Y, ID, Z) Z.char <- colnames(Z) Y.char <- \"Y\" ID.char <- \"ID\" formula <- as.formula(paste(\"Y ~\", paste(Z.char, collapse = \" + \"), \"+ id(ID)\"))  # Fit fixed linear effect model using three input formats fit_fe1 <- linear_fe(Y = Y, Z = Z, ID = ID) #> Input format: Y, Z, and ID. fit_fe2 <- linear_fe(data = data, Y.char = Y.char, Z.char = Z.char, ID.char = ID.char) #> Input format: data, Y.char, Z.char, and ID.char. fit_fe3 <- linear_fe(formula, data) #> Input format: formula and data."},{"path":"https://um-kevinhe.github.io/pprof/reference/linear_re.html","id":null,"dir":"Reference","previous_headings":"","what":"Main Function for Fitting the Random Effect Linear Model — linear_re","title":"Main Function for Fitting the Random Effect Linear Model — linear_re","text":"Fit random effect linear model via lmer lme4 package.","code":""},{"path":"https://um-kevinhe.github.io/pprof/reference/linear_re.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Main Function for Fitting the Random Effect Linear Model — linear_re","text":"","code":"linear_re(   formula = NULL,   data = NULL,   Y = NULL,   Z = NULL,   ID = NULL,   Y.char = NULL,   Z.char = NULL,   ID.char = NULL,   ... )"},{"path":"https://um-kevinhe.github.io/pprof/reference/linear_re.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Main Function for Fitting the Random Effect Linear Model — linear_re","text":"formula two-sided formula object describing model fitted, response variable left ~ operator covariates right, separated + operators. random effect grouping identifier specified using (1 | ). data data frame containing variables named formula, columns specified Y.char, Z.char, ID.char. Y numeric vector representing response variable. Z matrix data frame representing covariates, can include numeric categorical variables. ID numeric vector representing grouping identifier. Y.char character string specifying column name response variable data. Z.char character vector specifying column names covariates data. ID.char character string specifying column name grouping identifier data. ... additional arguments passed lmer customization.","code":""},{"path":"https://um-kevinhe.github.io/pprof/reference/linear_re.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Main Function for Fitting the Random Effect Linear Model — linear_re","text":"list objects S3 class \"random_re\": coefficient list containing estimated coefficients: FE, fixed effects predictor intercept, RE, random effects group. variance list containing variance estimates: FE, variance-covariance matrix fixed effect coefficients, RE, variance random effects. sigma residual standard error. fitted fitted values individual. observation original response individual. residuals residuals individual, response minus fitted values. linear_pred linear predictor individual. data_include data used fit model, sorted group identifier. categorical covariates, includes dummy variables created categories except reference level. char_list list character vectors representing column names response variable, covariates, group identifier. categorical variables, names reflect dummy variables created category. Loglkd log-likelihood. AIC Akaike info criterion. BIC Bayesian info criterion.","code":""},{"path":"https://um-kevinhe.github.io/pprof/reference/linear_re.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Main Function for Fitting the Random Effect Linear Model — linear_re","text":"function used fit random effect linear model form: $$Y_{ij} = \\mu + \\alpha_i + \\mathbf{Z}_{ij}^\\top\\boldsymbol\\beta + \\epsilon_{ij}$$ \\(Y_{ij}\\) continuous outcome individual \\(j\\) group \\(\\), \\(\\mu\\) overall intercept, \\(\\alpha_i\\) random effect group \\(\\), \\(\\mathbf{Z}_{ij}\\) covariates, \\(\\boldsymbol\\beta\\) vector coefficients covariates. model fitted overloading lmer function lme4 package. Three different input formats accepted: formula dataset, formula form response ~ covariates + (1 | group), group representing group identifier; dataset along column names response, covariates, group identifier; outcome vector \\(\\boldsymbol{Y}\\), covariate matrix data frame \\(\\mathbf{Z}\\), group identifier vector \\(\\boldsymbol{\\alpha}\\). addition input formats, arguments lmer function can modified via \\dots, allowing customization model fitting options controlling optimization method adjusting convergence criteria. default, model fitted using REML (restricted maximum likelihood). issues arise model fitting, consider using data_check function perform data quality check, can help identify missing values, low variation covariates, high-pairwise correlation, multicollinearity. datasets missing values, function automatically removes observations (rows) missing values fitting model.","code":""},{"path":"https://um-kevinhe.github.io/pprof/reference/linear_re.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Main Function for Fitting the Random Effect Linear Model — linear_re","text":"Bates D, Maechler M, Bolker B, Walker S (2015). Fitting Linear Mixed-Effects Models Using lme4. Journal Statistical Software, 67(1), 1-48.","code":""},{"path":[]},{"path":"https://um-kevinhe.github.io/pprof/reference/linear_re.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Main Function for Fitting the Random Effect Linear Model — linear_re","text":"","code":"data(ExampleDataLinear) Y <- ExampleDataLinear$Y Z <- ExampleDataLinear$Z ID <- ExampleDataLinear$ID data <- data.frame(Y, ID, Z) Z.char <- colnames(Z) Y.char <- \"Y\" ID.char <- \"ID\" formula <- as.formula(paste(\"Y ~\", paste(Z.char, collapse = \" + \"), \"+ (1 | ID)\"))  # Fit random effect linear model using three input formats fit_re1 <- linear_re(Y = Y, Z = Z, ID = ID) #> Input format: Y, Z, and ID. fit_re2 <- linear_re(data = data, Y.char = Y.char, Z.char = Z.char, ID.char = ID.char) #> Input format: data, Y.char, Z.char, and ID.char. fit_re3 <- linear_re(formula, data) #> Input format: formula and data."},{"path":"https://um-kevinhe.github.io/pprof/reference/logis_fe.html","id":null,"dir":"Reference","previous_headings":"","what":"Main Function for Fitting the Fixed Effect Logistic Model — logis_fe","title":"Main Function for Fitting the Fixed Effect Logistic Model — logis_fe","text":"Fit fixed effect logistic model via Serial blockwise inversion Newton (SerBIN) block ascent Newton (BAN) algorithm.","code":""},{"path":"https://um-kevinhe.github.io/pprof/reference/logis_fe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Main Function for Fitting the Fixed Effect Logistic Model — logis_fe","text":"","code":"logis_fe(   formula = NULL,   data = NULL,   Y.char = NULL,   Z.char = NULL,   ID.char = NULL,   Y = NULL,   Z = NULL,   ID = NULL,   method = \"SerBIN\",   max.iter = 1000,   tol = 1e-05,   bound = 10,   cutoff = 10,   backtrack = TRUE,   stop = \"or\",   threads = 1,   message = TRUE )"},{"path":"https://um-kevinhe.github.io/pprof/reference/logis_fe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Main Function for Fitting the Fixed Effect Logistic Model — logis_fe","text":"formula two-sided formula object describing model fitted, response variable left ~ operator covariates right, separated + operators. fixed effect grouping identifier specified using id(). data data frame containing variables named formula, columns specified Y.char, Z.char, ID.char. Y.char character string specifying column name response variable data. Z.char character vector specifying column names covariates data. ID.char character string specifying column name grouping identifier data. Y numeric vector representing response variable. Z matrix data frame representing covariates, can include numeric categorical variables. ID numeric vector representing grouping identifier. method string specifying algorithm used. default value \"SerBIN\". \"SerBIN\" uses Serial blockwise inversion Newton algorithm fit model (See Wu et al. (2022)). \"BAN\" uses block ascent Newton algorithm fit model (See et al. (2013)). max.iter maximum iteration number stopping criterion specified stop satisfied. default value 10,000. tol tolerance used stopping algorithm. See details stop . default value 1e-5. bound positive number avoid inflation provider effect. default value 10. cutoff integer specifying minimum number observations required providers. Providers fewer observations cutoff labeled \"include = 0\" excluded model fitting. default 10. backtrack Boolean indicating whether backtracking line search implemented. default FALSE. stop character string specifying stopping rule determine convergence. \"beta\" stop algorithm infinity norm difference current previous beta coefficients less tol. \"relch\" stop algorithm \\((loglik(m)-loglik(m-1))/(loglik(m))\\) less tol. \"ratch\" stop algorithm \\((loglik(m)-loglik(m-1))/(loglik(m)-loglik(0))\\) less tol. \"\" stop algorithm stopping rules (\"beta\", \"relch\", \"ratch\") met. \"\" stop algorithm one rules (\"beta\", \"relch\", \"ratch\") met. default value . iter.max achieved, overrides stop rule algorithm termination. threads positive integer specifying number threads used. default value 1. message Boolean indicating whether print progress fitting process. default TRUE.","code":""},{"path":"https://um-kevinhe.github.io/pprof/reference/logis_fe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Main Function for Fitting the Fixed Effect Logistic Model — logis_fe","text":"list objects S3 class \"logis_fe\": coefficient list containing estimated coefficients: beta, fixed effects predictor, gamma, effect group. variance list containing variance estimates: beta, variance-covariance matrix predictor coefficients, gamma, variance group effects. linear_pred linear predictor individual. prediction predicted probability individual observation original response individual. Loglkd log-likelihood AIC Akaike info criterion BIC Bayesian info criterion AUC area ROC curve char_list list character vectors representing column names response variable, covariates, group identifier. categorical variables, names reflect dummy variables created category. data_include data used fit model, sorted group identifier. categorical covariates, includes dummy variables created categories except reference level. Additionally, contains three extra columns: included, indicating whether provider included based cutoff argument; .events, indicating observations provider 1; .events, indicating observations provider 0.","code":""},{"path":"https://um-kevinhe.github.io/pprof/reference/logis_fe.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Main Function for Fitting the Fixed Effect Logistic Model — logis_fe","text":"function accepts three different input formats: formula dataset, formula form response ~ covariates + id(group), group representing group identifier; dataset along column names response, covariates, group identifier; binary outcome vector \\(\\boldsymbol{Y}\\), covariate matrix data frame \\(\\mathbf{Z}\\), group identifier vector \\(\\boldsymbol{\\gamma}\\). default algorithm based Serial blockwise inversion Newton (SerBIN) proposed Wu et al. (2022), users can also choose use block ascent Newton (BAN) algorithm proposed et al. (2013) fit model. methodologies build upon Newton-Raphson method, yet SerBIN simultaneously updates provider effect covariate coefficient. concurrent update necessitates inversion complete information matrix iteration. contrast, BAN adopts two-layer updating approach, covariate coefficient sequentially fixed update provider effect, followed fixing provider effect update covariate coefficient. suggest using default \"SerBIN\" option typically converges much faster datasets. However, rare cases SerBIN algorithm encounters second-order derivative irreversibility leading error, users can consider using \"BAN\" option alternative. deeper understanding, please consult original article detailed insights. issues arise model fitting, consider using data_check function perform data quality check, can help identify missing values, low variation covariates, high-pairwise correlation, multicollinearity. datasets missing values, function automatically removes observations (rows) missing values fitting model.","code":""},{"path":"https://um-kevinhe.github.io/pprof/reference/logis_fe.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Main Function for Fitting the Fixed Effect Logistic Model — logis_fe","text":"Wu, W, Yang, Y, Kang, J, , K. (2022) Improving large-scale estimation inference profiling health care providers. Statistics Medicine, 41(15): 2840-2853. K, Kalbfleisch, J, Li, Y, et al. (2013) Evaluating hospital readmission rates dialysis providers; adjusting hospital effects. Lifetime Data Analysis, 19: 490-512.","code":""},{"path":[]},{"path":"https://um-kevinhe.github.io/pprof/reference/logis_fe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Main Function for Fitting the Fixed Effect Logistic Model — logis_fe","text":"","code":"data(data_FE) #> Warning: data set 'data_FE' not found fit_fe <- logis_fe(Y = data_FE$Y, Z = data_FE$Z, ID = data_FE$ID, message = FALSE) #> Error: object 'data_FE' not found"},{"path":"https://um-kevinhe.github.io/pprof/reference/logis_firth.html","id":null,"dir":"Reference","previous_headings":"","what":"Main function for fitting fixed effects model with firth's bias correction — logis_firth","title":"Main function for fitting fixed effects model with firth's bias correction — logis_firth","text":"Main function fitting fixed effects model firth's bias correction","code":""},{"path":"https://um-kevinhe.github.io/pprof/reference/logis_firth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Main function for fitting fixed effects model with firth's bias correction — logis_firth","text":"","code":"logis_firth(   data.prep,   max.iter = 10000,   tol = 1e-05,   bound = 10,   backtrack = TRUE,   Rcpp = TRUE,   AUC = FALSE,   message = FALSE )"},{"path":"https://um-kevinhe.github.io/pprof/reference/logis_firth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Main function for fitting fixed effects model with firth's bias correction — logis_firth","text":"data.prep object fe_data_prep() function. max.iter maximum number iterations. Defaulting 10,000. tol small positive number specifying stopping criterion Newton-Raphson algorithm. Defaulting 1e-5. bound positive number avoid inflation provider effect. Defaulting 10. backtrack boolean indicating whether backtracking line search implemented. Defaulting FALSE. Rcpp Boolean indicating whether Rcpp function used. Defaulting TRUE. AUC Boolean indicating whether report AUC. Defaulting FALSE. message Boolean indicating whether track fitting process. Defaulting TRUE. ...","code":""},{"path":"https://um-kevinhe.github.io/pprof/reference/logis_firth.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Main function for fitting fixed effects model with firth's bias correction — logis_firth","text":"object S3 class logis_fe. beta vector fixed effects estimates covariates gamma vector estimates provider effects obs vector patients-level outcome neg2Loglkd minus two times log likelihood AIC Akaike info criterion BIC Bayesian info criterion AUC area ROC curve","code":""},{"path":"https://um-kevinhe.github.io/pprof/reference/logis_firth.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Main function for fitting fixed effects model with firth's bias correction — logis_firth","text":"","code":"data(data_FE) data.prep <- fe_data_prep(data_FE$Y, data_FE$Z, data_FE$ID) #> Checking missingness of variables ...  #> Missing values NOT found. Checking missingness of variables completed! #> Checking variation in covariates ...  #> Checking variation in covariates completed! #> Checking pairwise correlation among covariates ...  #> Checking pairwise correlation among covariates completed! #> Checking VIF of covariates ...  #> Checking VIF of covariates completed! #> Warning: 0 out of 10 providers considered small and filtered out! #> 0 out of 10 remaining providers with no events. #> 0 out of 10 remaining providers with all events. #> After screening, 52% of all records exhibit occurrences of events (Y = 1) fit_firth <- logis_firth(data.prep)"},{"path":"https://um-kevinhe.github.io/pprof/reference/plot.linear_fe.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Funnel Plot for institutional comparisons — plot.linear_fe","title":"Get Funnel Plot for institutional comparisons — plot.linear_fe","text":"Creates funnel plot linear fixed-effect model compare provider performance.","code":""},{"path":"https://um-kevinhe.github.io/pprof/reference/plot.linear_fe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Funnel Plot for institutional comparisons — plot.linear_fe","text":"","code":"# S3 method for linear_fe plot(   fit,   null = \"median\",   target = 0,   alpha = c(0.05, 0.01),   labels = c(\"lower\", \"expected\", \"higher\"),   point_colors = c(\"#E69F00\", \"#56B4E9\", \"#009E73\"),   point_shapes = c(15, 17, 19),   point_size = 2,   point_alpha = 0.8,   line_size = 0.8,   target_line_type = \"longdash\" )"},{"path":"https://um-kevinhe.github.io/pprof/reference/plot.linear_fe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Funnel Plot for institutional comparisons — plot.linear_fe","text":"fit model fitted linear_fe. null character string number specifying null hypotheses fixed provider effects. default \"median\". target numeric value representing target outcome. default value 0. labels vector labels plot. point_colors vector colors representing different provider flags. default c(\"#E69F00\", \"#56B4E9\", \"#009E73\"). point_shapes vector shapes representing different provider flags. default c(15, 17, 19). point_size size points. default 2. point_alpha alpha points. default 0.8. line_size size lines, including control limits target line. default 0.8. target_line_type line type target line. default \"longdash\". alphas vector significance levels. default alpha = c(0.05, 0.01).","code":""},{"path":"https://um-kevinhe.github.io/pprof/reference/plot.linear_fe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Funnel Plot for institutional comparisons — plot.linear_fe","text":"ggplot object representing funnel plot.","code":""},{"path":"https://um-kevinhe.github.io/pprof/reference/plot.linear_fe.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Funnel Plot for institutional comparisons — plot.linear_fe","text":"function generates funnel plot linear fixed-effect model. Currently, supports indirect standardized difference. parameter alpha vector used calculate control limits different significance levels. first value vector used significance level flagging provider, utilizing test.linear_fe function.","code":""},{"path":[]},{"path":"https://um-kevinhe.github.io/pprof/reference/plot.linear_fe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Funnel Plot for institutional comparisons — plot.linear_fe","text":"","code":"data(ExampleDataLinear) Y <- ExampleDataLinear$Y Z <- ExampleDataLinear$Z ID <- ExampleDataLinear$ID fit_fe <- linear_fe(Y = Y, Z = Z, ID = ID) #> Input format: Y, Z, and ID. plot(fit_fe)"},{"path":"https://um-kevinhe.github.io/pprof/reference/plot.logis_fe.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Funnel Plot for institutional comparisons — plot.logis_fe","title":"Get Funnel Plot for institutional comparisons — plot.logis_fe","text":"Creates funnel plot logistic fixed-effect model compare provider performance.","code":""},{"path":"https://um-kevinhe.github.io/pprof/reference/plot.logis_fe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Funnel Plot for institutional comparisons — plot.logis_fe","text":"","code":"# S3 method for logis_fe plot(   fit,   null = \"median\",   test = \"score\",   target = 1,   alpha = c(0.05, 0.01),   labels = c(\"lower\", \"expected\", \"higher\"),   point_colors = c(\"#E69F00\", \"#56B4E9\", \"#009E73\"),   point_shapes = c(15, 17, 19),   point_size = 2,   point_alpha = 0.8,   line_size = 0.8,   target_line_type = \"longdash\" )"},{"path":"https://um-kevinhe.github.io/pprof/reference/plot.logis_fe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Funnel Plot for institutional comparisons — plot.logis_fe","text":"fit model fitted logis_fe. null character string number specifying null hypotheses fixed provider effects. default \"median\". test character string specifying type testing method conducted. default \"score\". target numeric value representing target outcome. default value 1. labels vector labels plot. point_colors vector colors representing different provider flags. default c(\"#E69F00\", \"#56B4E9\", \"#009E73\"). point_shapes vector shapes representing different provider flags. default c(15, 17, 19). point_size size points. default 2. point_alpha alpha points. default 0.8. line_size size lines, including control limits target line. default 0.8. target_line_type line type target line. default \"longdash\". alphas vector significance levels. default alpha = c(0.05, 0.01).","code":""},{"path":"https://um-kevinhe.github.io/pprof/reference/plot.logis_fe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Funnel Plot for institutional comparisons — plot.logis_fe","text":"ggplot object representing funnel plot.","code":""},{"path":"https://um-kevinhe.github.io/pprof/reference/plot.logis_fe.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Funnel Plot for institutional comparisons — plot.logis_fe","text":"function generates funnel plot logistic fixed-effect model. Currently, supports indirect standardized ratio. parameter alpha vector used calculate control limits different significance levels. first value vector used significance level flagging provider, utilizing test.logis_fe function.","code":""},{"path":[]},{"path":"https://um-kevinhe.github.io/pprof/reference/plot.logis_fe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Funnel Plot for institutional comparisons — plot.logis_fe","text":"","code":"data(data_FE) #> Warning: data set 'data_FE' not found fit_fe <- logis_fe(Y = data_FE$Y, Z = data_FE$Z, ID = data_FE$ID, message = FALSE) #> Error: object 'data_FE' not found plot(fit_fe) #> Error: object 'fit_fe' not found"},{"path":"https://um-kevinhe.github.io/pprof/reference/SM_output.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic Function for Calculating Standardized Measures — SM_output","title":"Generic Function for Calculating Standardized Measures — SM_output","text":"SM_output S3 generic function designed calculate standardized measures. dispatches appropriate method based class input (fit), ensuring correct method applied different types models.","code":""},{"path":"https://um-kevinhe.github.io/pprof/reference/SM_output.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic Function for Calculating Standardized Measures — SM_output","text":"","code":"SM_output(fit, ...)"},{"path":"https://um-kevinhe.github.io/pprof/reference/SM_output.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic Function for Calculating Standardized Measures — SM_output","text":"fit input object, typically fitted model, standardized measures calculated. method applied depends class object. ... Additional arguments can passed specific methods.","code":""},{"path":"https://um-kevinhe.github.io/pprof/reference/SM_output.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic Function for Calculating Standardized Measures — SM_output","text":"return varies depending method implemented class input object.","code":""},{"path":"https://um-kevinhe.github.io/pprof/reference/SM_output.linear_fe.html","id":null,"dir":"Reference","previous_headings":"","what":"Standardized Measures Output Function — SM_output.linear_fe","title":"Standardized Measures Output Function — SM_output.linear_fe","text":"Provide direct/indirect standardized difference fixed effect linear model.","code":""},{"path":"https://um-kevinhe.github.io/pprof/reference/SM_output.linear_fe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Standardized Measures Output Function — SM_output.linear_fe","text":"","code":"# S3 method for linear_fe SM_output(fit, parm, stdz = \"indirect\", null = \"median\")"},{"path":"https://um-kevinhe.github.io/pprof/reference/SM_output.linear_fe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Standardized Measures Output Function — SM_output.linear_fe","text":"fit model fitted linear_fe. parm specifies subset providers confidence intervals given. default, providers included. class parm match class provider IDs. stdz character string vector specifying standardization method(s). possible values : \"indirect\" (default) indirect standardization method. \"direct\" direct standardization method. c(\"indirect\", \"direct\") outputs direct indirect standardized measures. null character string number defining population norm. default value \"median\". possible values : \"median\" median provider effect estimates (\\(\\hat{\\gamma}_i\\)). \"mean\" weighted average provider effect estimates (\\(\\hat{\\gamma}_i\\)), weights correspond sample size provider. numeric user-defined numeric value representing population norm.","code":""},{"path":"https://um-kevinhe.github.io/pprof/reference/SM_output.linear_fe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Standardized Measures Output Function — SM_output.linear_fe","text":"list containing standardized differences based method(s) specified stdz, well observed expected outcomes used calculate standardized measures: indirect.difference indirect standardized differences, stdz includes \"indirect\". direct.difference direct standardized differences, stdz includes \"direct\". OE list data frames containing observed expected outcomes used calculating standardized measures.","code":""},{"path":"https://um-kevinhe.github.io/pprof/reference/SM_output.linear_fe.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Standardized Measures Output Function — SM_output.linear_fe","text":"function computes standardized differences fixed effect linear model using either direct indirect methods, specified. method, population norm determined null argument. population norm can median estimates, weighted mean (weights corresponding provider sizes), user-defined numeric value.","code":""},{"path":"https://um-kevinhe.github.io/pprof/reference/SM_output.linear_fe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Standardized Measures Output Function — SM_output.linear_fe","text":"","code":"data(ExampleDataLinear) Y <- ExampleDataLinear$Y Z <- ExampleDataLinear$Z ID <- ExampleDataLinear$ID  # Fit a fixed linear effect model fit_fe <- linear_fe(Y = Y, Z = Z, ID = ID) #> Input format: Y, Z, and ID. SM_output(fit_fe) #> $indirect.difference #>     Indirect_standardized.difference #> 1                       -0.370387492 #> 2                       -0.864439821 #> 3                       -0.707620305 #> 4                        0.276001179 #> 5                        0.263906784 #> 6                        0.545099160 #> 7                       -0.075159001 #> 8                       -0.000910955 #> 9                        0.034446109 #> 10                      -0.104258253 #> 11                      -0.446719918 #> 12                       0.272124885 #> 13                      -0.389098903 #> 14                      -0.536111775 #> 15                       0.239984666 #> 16                       0.709655905 #> 17                      -0.204927425 #> 18                      -0.559891638 #> 19                       0.305127819 #> 20                      -0.349044122 #> 21                       0.539809597 #> 22                      -0.066203547 #> 23                       0.170000547 #> 24                      -0.287521481 #> 25                       0.615940315 #> 26                      -0.319395397 #> 27                       0.561550115 #> 28                       0.503528347 #> 29                      -0.075355715 #> 30                      -0.248823513 #> 31                       0.073722417 #> 32                      -0.497946595 #> 33                       0.089175592 #> 34                      -0.407584532 #> 35                      -0.301273818 #> 36                      -0.356371875 #> 37                      -0.581289472 #> 38                      -0.317345556 #> 39                       0.372819229 #> 40                      -0.965013385 #> 41                       0.876132354 #> 42                      -0.581068848 #> 43                       0.309689704 #> 44                       0.029360968 #> 45                      -0.125427582 #> 46                      -0.237415644 #> 47                       0.252593359 #> 48                       0.658136650 #> 49                      -0.281625478 #> 50                       0.171954742 #> 51                       0.402203905 #> 52                      -0.435091528 #> 53                       0.064973790 #> 54                       0.721207770 #> 55                       0.045288463 #> 56                      -0.219211832 #> 57                       0.562919521 #> 58                      -0.217467569 #> 59                       0.479610640 #> 60                       0.014263420 #> 61                      -0.341672988 #> 62                       0.168812468 #> 63                       0.425351081 #> 64                       0.112877281 #> 65                      -0.240767716 #> 66                       0.113621679 #> 67                      -0.210017207 #> 68                      -0.377252972 #> 69                       0.340108560 #> 70                      -0.592022169 #> 71                       0.359159317 #> 72                      -0.577191699 #> 73                       0.253202263 #> 74                       0.161887778 #> 75                       0.329562851 #> 76                      -0.474828215 #> 77                       0.178203557 #> 78                       0.154776675 #> 79                      -0.059867540 #> 80                      -0.001693390 #> 81                       0.757613642 #> 82                       0.117947073 #> 83                      -0.547038800 #> 84                       0.601429101 #> 85                       0.231636139 #> 86                      -0.593113354 #> 87                       0.413513827 #> 88                       0.000910955 #> 89                       0.668264685 #> 90                      -0.052249693 #> 91                      -0.346328614 #> 92                      -1.183652486 #> 93                       0.670704078 #> 94                      -0.135793277 #> 95                      -0.011371410 #> 96                      -0.139075317 #> 97                       0.308817383 #> 98                      -0.244303261 #> 99                       0.242067535 #> 100                     -0.301230370 #>  #> $OE #> $OE$OE_indirect #>             Obs          Exp #> 1   -157.715756 -124.7512694 #> 2   -235.029835 -164.1457696 #> 3   -161.330251 -107.5511083 #> 4     12.148596   -8.2754908 #> 5    -88.031919 -109.9361821 #> 6     48.335509    4.7275765 #> 7   -116.630283 -111.0685166 #> 8    -90.344711  -90.2809438 #> 9    -64.180314  -66.8671102 #> 10   -72.317688  -64.1855440 #> 11  -129.303670  -96.6931156 #> 12   -48.166623  -68.8481147 #> 13  -109.945543  -78.8176311 #> 14  -131.763433  -97.4522794 #> 15   -10.687705  -29.4065090 #> 16    10.091353  -34.6169689 #> 17   -98.875846  -84.7358535 #> 18  -180.994977 -139.0031041 #> 19    15.119974   -8.6799959 #> 20  -115.177613  -85.8579065 #> 21    10.517996  -27.2686759 #> 22   -81.223403  -75.9271194 #> 23   -34.347214  -45.2272491 #> 24  -144.125538 -121.4113412 #> 25    38.443460  -15.1433476 #> 26  -110.791125  -83.0037253 #> 27     4.027324  -37.5273840 #> 28    16.944368  -26.8625982 #> 29   -90.210459  -83.9559343 #> 30  -112.707269  -91.8060941 #> 31   -45.753134  -51.3560381 #> 32  -149.594718 -109.7589909 #> 33   -15.876352  -23.1887501 #> 34  -154.499806 -122.3006274 #> 35  -112.521327  -89.9257904 #> 36  -133.359468 -103.0678583 #> 37  -213.594666 -162.4411922 #> 38  -100.255607  -77.0893810 #> 39    19.251324  -13.9295871 #> 40  -212.944673 -141.5336828 #> 41    46.415522   -8.7808163 #> 42  -123.720420  -89.4373581 #> 43     6.726943  -18.3579229 #> 44  -104.067947 -106.6810728 #> 45  -111.481738  -99.9424003 #> 46  -106.473265  -88.6670913 #> 47   -32.859116  -53.3191784 #> 48    59.740102   -0.1503331 #> 49  -103.582696  -79.3629048 #> 50   -60.976716  -73.5294117 #> 51   -29.991011  -66.9937700 #> 52  -125.142596  -94.2510971 #> 53  -109.432204 -114.4351862 #> 54    36.586658  -26.1584184 #> 55   -47.917256  -51.9932176 #> 56  -144.069503 -128.7246747 #> 57    51.032523    7.6877200 #> 58   -95.912780  -74.3834903 #> 59     1.873550  -33.1380264 #> 60   -85.485817  -86.3986754 #> 61  -115.766773  -89.1162801 #> 62   -57.803449  -71.6460711 #> 63   -28.219382  -57.5686068 #> 64   -35.278527  -43.6314459 #> 65   -79.593811  -61.7770000 #> 66   -54.996796  -62.6094488 #> 67  -116.500374 -100.9591010 #> 68  -156.150140 -126.3471551 #> 69    -3.494150  -29.6825095 #> 70  -111.265749  -68.6401524 #> 71   -49.782323  -81.0291838 #> 72  -212.898002 -163.8367074 #> 73   -32.935614  -52.1789857 #> 74   -87.916855 -103.4580818 #> 75   -10.678281  -41.3276258 #> 76  -144.881086 -108.7941419 #> 77   -28.680333  -38.3033253 #> 78  -107.831866 -122.2260970 #> 79  -108.549615 -103.9398144 #> 80   -64.099657  -63.9675730 #> 81    69.323575    4.9264151 #> 82   -12.444641  -21.8804069 #> 83  -156.472081 -116.5382483 #> 84    21.931744  -32.7983041 #> 85   -21.228819  -43.0026157 #> 86  -146.036406  -97.4011109 #> 87   -62.460338  -98.4360410 #> 88   -84.253706  -84.3229383 #> 89    27.167972  -36.9854381 #> 90   -82.981425  -78.6447003 #> 91  -104.900312  -81.0036376 #> 92  -253.299242 -163.3416530 #> 93    98.206490   46.5622759 #> 94  -121.894903 -109.8093013 #> 95   -32.073281  -31.1749394 #> 96   -73.600832  -61.3622038 #> 97   -44.325704  -63.1635644 #> 98  -181.479820 -159.2482236 #> 99   -58.963805  -75.6664644 #> 100 -123.421707  -98.1183564 #>  #>  SM_output(fit_fe, stdz = \"direct\", null = \"mean\") #> $direct.difference #>     Direct_standardized.difference #> 1                     -0.366837117 #> 2                     -0.860889446 #> 3                     -0.704069930 #> 4                      0.279551555 #> 5                      0.267457159 #> 6                      0.548649536 #> 7                     -0.071608626 #> 8                      0.002639420 #> 9                      0.037996484 #> 10                    -0.100707878 #> 11                    -0.443169543 #> 12                     0.275675260 #> 13                    -0.385548528 #> 14                    -0.532561400 #> 15                     0.243535042 #> 16                     0.713206280 #> 17                    -0.201377050 #> 18                    -0.556341262 #> 19                     0.308678194 #> 20                    -0.345493747 #> 21                     0.543359972 #> 22                    -0.062653172 #> 23                     0.173550922 #> 24                    -0.283971106 #> 25                     0.619490690 #> 26                    -0.315845022 #> 27                     0.565100490 #> 28                     0.507078722 #> 29                    -0.071805340 #> 30                    -0.245273138 #> 31                     0.077272792 #> 32                    -0.494396220 #> 33                     0.092725967 #> 34                    -0.404034157 #> 35                    -0.297723442 #> 36                    -0.352821500 #> 37                    -0.577739097 #> 38                    -0.313795181 #> 39                     0.376369605 #> 40                    -0.961463010 #> 41                     0.879682729 #> 42                    -0.577518472 #> 43                     0.313240079 #> 44                     0.032911344 #> 45                    -0.121877206 #> 46                    -0.233865269 #> 47                     0.256143735 #> 48                     0.661687025 #> 49                    -0.278075103 #> 50                     0.175505117 #> 51                     0.405754280 #> 52                    -0.431541152 #> 53                     0.068524165 #> 54                     0.724758145 #> 55                     0.048838838 #> 56                    -0.215661457 #> 57                     0.566469896 #> 58                    -0.213917194 #> 59                     0.483161015 #> 60                     0.017813795 #> 61                    -0.338122613 #> 62                     0.172362843 #> 63                     0.428901456 #> 64                     0.116427657 #> 65                    -0.237217340 #> 66                     0.117172054 #> 67                    -0.206466832 #> 68                    -0.373702597 #> 69                     0.343658935 #> 70                    -0.588471794 #> 71                     0.362709692 #> 72                    -0.573641324 #> 73                     0.256752638 #> 74                     0.165438153 #> 75                     0.333113226 #> 76                    -0.471277840 #> 77                     0.181753932 #> 78                     0.158327050 #> 79                    -0.056317165 #> 80                     0.001856985 #> 81                     0.761164017 #> 82                     0.121497448 #> 83                    -0.543488425 #> 84                     0.604979476 #> 85                     0.235186514 #> 86                    -0.589562979 #> 87                     0.417064202 #> 88                     0.004461330 #> 89                     0.671815060 #> 90                    -0.048699318 #> 91                    -0.342778239 #> 92                    -1.180102111 #> 93                     0.674254453 #> 94                    -0.132242902 #> 95                    -0.007821035 #> 96                    -0.135524941 #> 97                     0.312367758 #> 98                    -0.240752886 #> 99                     0.245617910 #> 100                   -0.297679994 #>  #> $OE #> $OE$OE_direct #>           Obs         Exp #> 1   -7376.689 -10275.0689 #> 2   -7376.689 -14178.5763 #> 3   -7376.689 -12939.5453 #> 4   -7376.689  -5167.9520 #> 5   -7376.689  -5263.5098 #> 6   -7376.689  -3041.8088 #> 7   -7376.689  -7942.4686 #> 8   -7376.689  -7355.8347 #> 9   -7376.689  -7076.4786 #> 10  -7376.689  -8172.3818 #> 11  -7376.689 -10878.1714 #> 12  -7376.689  -5198.5786 #> 13  -7376.689 -10422.9077 #> 14  -7376.689 -11584.4564 #> 15  -7376.689  -5452.5184 #> 16  -7376.689  -1741.6460 #> 17  -7376.689  -8967.7689 #> 18  -7376.689 -11772.3411 #> 19  -7376.689  -4937.8224 #> 20  -7376.689 -10106.4349 #> 21  -7376.689  -3083.6017 #> 22  -7376.689  -7871.7115 #> 23  -7376.689  -6005.4630 #> 24  -7376.689  -9620.3445 #> 25  -7376.689  -2482.0929 #> 26  -7376.689  -9872.1803 #> 27  -7376.689  -2911.8298 #> 28  -7376.689  -3370.2598 #> 29  -7376.689  -7944.0228 #> 30  -7376.689  -9314.5919 #> 31  -7376.689  -6766.1565 #> 32  -7376.689 -11282.9133 #> 33  -7376.689  -6644.0609 #> 34  -7376.689 -10568.9627 #> 35  -7376.689  -9729.0017 #> 36  -7376.689 -10164.3315 #> 37  -7376.689 -11941.4054 #> 38  -7376.689  -9855.9845 #> 39  -7376.689  -4402.9926 #> 40  -7376.689 -14973.2081 #> 41  -7376.689   -426.3156 #> 42  -7376.689 -11939.6623 #> 43  -7376.689  -4901.7789 #> 44  -7376.689  -7116.6563 #> 45  -7376.689  -8339.6406 #> 46  -7376.689  -9224.4583 #> 47  -7376.689  -5352.8972 #> 48  -7376.689  -2148.6996 #> 49  -7376.689  -9573.7602 #> 50  -7376.689  -5990.0229 #> 51  -7376.689  -4170.8242 #> 52  -7376.689 -10786.2955 #> 53  -7376.689  -6835.2794 #> 54  -7376.689  -1650.3747 #> 55  -7376.689  -6990.8131 #> 56  -7376.689  -9080.6300 #> 57  -7376.689  -2901.0102 #> 58  -7376.689  -9066.8486 #> 59  -7376.689  -3559.2336 #> 60  -7376.689  -7235.9420 #> 61  -7376.689 -10048.1956 #> 62  -7376.689  -6014.8500 #> 63  -7376.689  -3987.9384 #> 64  -7376.689  -6456.7939 #> 65  -7376.689  -9250.9430 #> 66  -7376.689  -6450.9124 #> 67  -7376.689  -9007.9832 #> 68  -7376.689 -10329.3130 #> 69  -7376.689  -4661.4396 #> 70  -7376.689 -12026.2045 #> 71  -7376.689  -4510.9195 #> 72  -7376.689 -11909.0289 #> 73  -7376.689  -5348.0862 #> 74  -7376.689  -6069.5620 #> 75  -7376.689  -4744.7612 #> 76  -7376.689 -11100.2550 #> 77  -7376.689  -5940.6510 #> 78  -7376.689  -6125.7468 #> 79  -7376.689  -7821.6507 #> 80  -7376.689  -7362.0168 #> 81  -7376.689  -1362.7319 #> 82  -7376.689  -6416.7375 #> 83  -7376.689 -11670.7909 #> 84  -7376.689  -2596.7460 #> 85  -7376.689  -5518.4802 #> 86  -7376.689 -12034.8259 #> 87  -7376.689  -4081.4645 #> 88  -7376.689  -7341.4398 #> 89  -7376.689  -2068.6780 #> 90  -7376.689  -7761.4621 #> 91  -7376.689 -10084.9797 #> 92  -7376.689 -16700.6756 #> 93  -7376.689  -2049.4044 #> 94  -7376.689  -8421.5400 #> 95  -7376.689  -7438.4828 #> 96  -7376.689  -8447.4714 #> 97  -7376.689  -4908.6712 #> 98  -7376.689  -9278.8774 #> 99  -7376.689  -5436.0617 #> 100 -7376.689  -9728.6584 #>  #>"},{"path":"https://um-kevinhe.github.io/pprof/reference/SM_output.linear_re.html","id":null,"dir":"Reference","previous_headings":"","what":"Standardized Measures Output Function — SM_output.linear_re","title":"Standardized Measures Output Function — SM_output.linear_re","text":"Provide direct/indirect standardized difference random effect linear model.","code":""},{"path":"https://um-kevinhe.github.io/pprof/reference/SM_output.linear_re.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Standardized Measures Output Function — SM_output.linear_re","text":"","code":"# S3 method for linear_re SM_output(fit, parm, stdz = \"indirect\")"},{"path":"https://um-kevinhe.github.io/pprof/reference/SM_output.linear_re.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Standardized Measures Output Function — SM_output.linear_re","text":"fit model fitted linear_re. parm specifies subset providers confidence intervals given. default, providers included. class parm match class provider IDs. stdz character string vector specifying standardization method(s). possible values : \"indirect\" (default) indirect standardization method. \"direct\" direct standardization method. c(\"indirect\", \"direct\") outputs direct indirect standardized measures.","code":""},{"path":"https://um-kevinhe.github.io/pprof/reference/SM_output.linear_re.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Standardized Measures Output Function — SM_output.linear_re","text":"list containing standardized differences based method(s) specified stdz, well observed expected outcomes used calculate standardized measures: indirect.difference indirect standardized differences, stdz includes \"indirect\". direct.difference direct standardized differences, stdz includes \"direct\". OE list data frames containing observed expected outcomes used calculating standardized measures.","code":""},{"path":"https://um-kevinhe.github.io/pprof/reference/SM_output.linear_re.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Standardized Measures Output Function — SM_output.linear_re","text":"function computes standardized differences random effect linear model using either direct indirect methods, specified. function returns standardized differences observed expected outcomes used calculation.","code":""},{"path":"https://um-kevinhe.github.io/pprof/reference/SM_output.linear_re.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Standardized Measures Output Function — SM_output.linear_re","text":"K, Kalbfleisch, J, Li, Y, et al. (2013) Evaluating hospital readmission rates dialysis facilities; adjusting hospital effects. Lifetime Data Analysis, 19: 490-512.","code":""},{"path":"https://um-kevinhe.github.io/pprof/reference/SM_output.linear_re.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Standardized Measures Output Function — SM_output.linear_re","text":"","code":"data(ExampleDataLinear) Y <- ExampleDataLinear$Y Z <- ExampleDataLinear$Z ID <- ExampleDataLinear$ID  # Fit a fixed linear effect model fit_re <- linear_re(Y = Y, Z = Z, ID = ID) #> Input format: Y, Z, and ID. SM_output(fit_re) #> $indirect.difference #>     Indirect_standardized.difference #> 1                       -0.338240958 #> 2                       -0.794389223 #> 3                       -0.646058872 #> 4                        0.260222333 #> 5                        0.253447824 #> 6                        0.511178626 #> 7                       -0.061265301 #> 8                        0.006948695 #> 9                        0.038982628 #> 10                      -0.089775701 #> 11                      -0.403966192 #> 12                       0.258342952 #> 13                      -0.353891953 #> 14                      -0.480798587 #> 15                       0.228403421 #> 16                       0.652245404 #> 17                      -0.180256778 #> 18                      -0.508231543 #> 19                       0.288147391 #> 20                      -0.317763248 #> 21                       0.501834328 #> 22                      -0.054292981 #> 23                       0.161368104 #> 24                      -0.258343295 #> 25                       0.580695732 #> 26                      -0.290963078 #> 27                       0.524245442 #> 28                       0.475868844 #> 29                      -0.062803193 #> 30                      -0.224160405 #> 31                       0.074646030 #> 32                      -0.454060915 #> 33                       0.088741486 #> 34                      -0.369611317 #> 35                      -0.270597627 #> 36                      -0.324613417 #> 37                      -0.534115124 #> 38                      -0.285213112 #> 39                       0.354251227 #> 40                      -0.881389857 #> 41                       0.803002465 #> 42                      -0.517811990 #> 43                       0.293492361 #> 44                       0.035110130 #> 45                      -0.110060527 #> 46                      -0.211669804 #> 47                       0.241146710 #> 48                       0.621420984 #> 49                      -0.255612145 #> 50                       0.165658248 #> 51                       0.383515095 #> 52                      -0.392390843 #> 53                       0.068123077 #> 54                       0.679024992 #> 55                       0.048869088 #> 56                      -0.192475634 #> 57                       0.525940998 #> 58                      -0.197817532 #> 59                       0.448000079 #> 60                       0.020624157 #> 61                      -0.308840599 #> 62                       0.163885562 #> 63                       0.397151882 #> 64                       0.110659002 #> 65                      -0.215252603 #> 66                       0.110843986 #> 67                      -0.185974771 #> 68                      -0.341368033 #> 69                       0.320761519 #> 70                      -0.537901540 #> 71                       0.342325491 #> 72                      -0.528870103 #> 73                       0.240576715 #> 74                       0.159376193 #> 75                       0.315175243 #> 76                      -0.431149420 #> 77                       0.166323929 #> 78                       0.152830117 #> 79                      -0.047475404 #> 80                       0.005401941 #> 81                       0.711346301 #> 82                       0.115364610 #> 83                      -0.495816092 #> 84                       0.569053793 #> 85                       0.223492669 #> 86                      -0.543695052 #> 87                       0.393472922 #> 88                       0.008107068 #> 89                       0.633800387 #> 90                      -0.041475064 #> 91                      -0.310329631 #> 92                      -1.084831958 #> 93                       0.625010127 #> 94                      -0.119090926 #> 95                      -0.004338301 #> 96                      -0.123299039 #> 97                       0.287366666 #> 98                      -0.219943853 #> 99                       0.229334049 #> 100                     -0.272865484 #>  #> $OE #> $OE$OE_indirect #>              Obs          Exp #> 1   -155.6145089 -125.5110636 #> 2   -230.0948672 -164.9549509 #> 3   -157.3167533 -108.2162790 #> 4     10.5320226   -8.7244300 #> 5    -89.6064077 -110.6425771 #> 6     45.1599249    4.2656348 #> 7   -116.2496855 -111.7160532 #> 8    -90.3878779  -90.8742865 #> 9    -64.4224847  -67.4631298 #> 10   -71.7599760  -64.7574713 #> 11  -126.7941188  -97.3045868 #> 12   -49.7715221  -69.4055864 #> 13  -107.7470677  -79.4357115 #> 14  -128.7765779  -98.0054683 #> 15   -12.1066109  -29.9220778 #> 16     6.0394224  -35.0520380 #> 17   -97.7560404  -85.3183227 #> 18  -177.8377006 -139.7203349 #> 19    13.3299219   -9.1455746 #> 20  -113.2035787  -86.5114659 #> 21     7.4004609  -27.7279420 #> 22   -80.8861200  -76.5426815 #> 23   -35.3496778  -45.6772365 #> 24  -142.5206375 -122.1115172 #> 25    34.8360157  -15.6845130 #> 26  -108.9835809  -83.6697931 #> 27     0.7705653  -38.0235974 #> 28    13.9881378  -27.4124516 #> 29   -89.8203077  -84.6076428 #> 30  -111.3147221  -92.4852481 #> 31   -46.2168564  -51.8899546 #> 32  -146.7739652 -110.4490920 #> 33   -16.4276384  -23.7044403 #> 34  -152.2036768 -123.0043827 #> 35  -110.8402987  -90.5454766 #> 36  -131.3428784 -103.7507380 #> 37  -210.2765934 -163.2744625 #> 38   -98.4837831  -77.6632259 #> 39    17.0506167  -14.4777425 #> 40  -207.4692333 -142.2463839 #> 41    41.4270464   -9.1621089 #> 42  -120.5036274  -89.9527200 #> 43     4.9036865  -18.8691947 #> 44  -104.2860605 -107.4108621 #> 45  -110.7980111 -100.6724426 #> 46  -105.1583127  -89.2830774 #> 47   -34.3571870  -53.8900705 #> 48    55.8796613   -0.6696483 #> 49  -101.9947619  -80.0121174 #> 50   -62.0058309  -74.0988830 #> 51   -32.3735136  -67.6569024 #> 52  -122.7049541  -94.8452042 #> 53  -109.8554040 -115.1008809 #> 54    32.3683647  -26.7068096 #> 55   -48.2208443  -52.6190622 #> 56  -142.8737905 -129.4004961 #> 57    47.7652308    7.2677739 #> 58   -94.6838818  -75.0999462 #> 59    -0.9095513  -33.6135571 #> 60   -85.6139396  -86.9338856 #> 61  -113.8481691  -89.7586024 #> 62   -58.8215516  -72.2601677 #> 63   -30.6866006  -58.0900805 #> 64   -35.9659717  -44.1547379 #> 65   -78.2566016  -62.3279090 #> 66   -55.6853901  -63.1119372 #> 67  -115.3450471 -101.5829141 #> 68  -154.0294663 -127.0613917 #> 69    -5.4868106  -30.1854476 #> 70  -107.9241539  -69.1952431 #> 71   -51.9089448  -81.6912625 #> 72  -209.6125130 -164.6585542 #> 73   -34.4301435  -52.7139738 #> 74   -88.9069446 -104.2070591 #> 75   -12.6362373  -41.9475348 #> 76  -142.2026656 -109.4353097 #> 77   -29.7135840  -38.6950762 #> 78  -108.7812896 -122.9944905 #> 79  -108.2546845 -104.5990784 #> 80   -64.1332158  -64.5545672 #> 81    64.9044927    4.4400572 #> 82   -13.1613182  -22.3904870 #> 83  -153.3919327 -117.1973579 #> 84    18.3966230  -33.3872722 #> 85   -22.6172175  -43.6255284 #> 86  -142.6588204  -98.0758262 #> 87   -64.9047017  -99.1368459 #> 88   -84.3040691  -84.9202063 #> 89    23.2306267  -37.6142105 #> 90   -82.7237702  -79.2813398 #> 91  -102.9724576  -81.5597131 #> 92  -246.5599628 -164.1127340 #> 93    94.3237524   46.1979726 #> 94  -121.1550769 -110.5559844 #> 95   -32.0463300  -31.7036043 #> 96   -72.8348636  -61.9845482 #> 97   -46.1109061  -63.6402727 #> 98  -180.1134678 -160.0985772 #> 99   -60.3884917  -76.2125411 #> 100 -121.7265909  -98.8058902 #>  #>"},{"path":"https://um-kevinhe.github.io/pprof/reference/SM_output.logis_fe.html","id":null,"dir":"Reference","previous_headings":"","what":"Standardized Measures Output Function — SM_output.logis_fe","title":"Standardized Measures Output Function — SM_output.logis_fe","text":"Provide direct/indirect standardized ratio/rate fixed effect logistic model.","code":""},{"path":"https://um-kevinhe.github.io/pprof/reference/SM_output.logis_fe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Standardized Measures Output Function — SM_output.logis_fe","text":"","code":"# S3 method for logis_fe SM_output(   fit,   parm,   stdz = \"indirect\",   measure = c(\"rate\", \"ratio\"),   null = \"median\",   threads = 2 )"},{"path":"https://um-kevinhe.github.io/pprof/reference/SM_output.logis_fe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Standardized Measures Output Function — SM_output.logis_fe","text":"fit model fitted logis_fe. parm specifies subset providers confidence intervals given. default, providers included. class parm match class provider IDs. stdz character string vector specifying standardization method(s). possible values : \"indirect\" (default) indirect standardization method. \"direct\" direct standardization method. c(\"indirect\", \"direct\") outputs direct indirect standardized measures. measure character string vector indicating whether output measure \"ratio\" \"rate\" \"rate\" output standardized rate. \"rate\" restricted 0% - 100%. \"ratio\" output standardized ratio. c(\"ratio\", \"rate\") (default) output ratio rate. null \"stdz = indirect\", character string number defining population norm. default \"median\". threads integer specifying number threads use. default value 2.","code":""},{"path":"https://um-kevinhe.github.io/pprof/reference/SM_output.logis_fe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Standardized Measures Output Function — SM_output.logis_fe","text":"list contains standardized measures, well observed expected outcomes used calculation, depending user's choice standardization method (stdz) measure type (measure). indirect.ratio standardization ratio using indirect method stdz includes \"indirect\" measure includes \"ratio\". direct.ratio standardization ratio using direct method stdz includes \"direct\" measure includes \"ratio\". indirect.rate standardization rate using indirect method stdz includes \"indirect\" measure includes \"rate\". direct.rate standardization rate using direct method stdz includes \"direct\" measure includes \"rate\". OE list data frames containing observed expected outcomes used calculating standardized measures.","code":""},{"path":"https://um-kevinhe.github.io/pprof/reference/SM_output.logis_fe.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Standardized Measures Output Function — SM_output.logis_fe","text":"K, Kalbfleisch, J, Li, Y, et al. (2013) Evaluating hospital readmission rates dialysis facilities; adjusting hospital effects. Lifetime Data Analysis, 19: 490-512.","code":""},{"path":"https://um-kevinhe.github.io/pprof/reference/SM_output.logis_fe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Standardized Measures Output Function — SM_output.logis_fe","text":"","code":"data(data_FE) #> Warning: data set 'data_FE' not found fit_fe <- logis_fe(Y = data_FE$Y, Z = data_FE$Z, ID = data_FE$ID, message = FALSE) #> Error: object 'data_FE' not found SR <- SM_output(fit_fe, stdz = \"direct\", measure = \"rate\") #> Error: object 'fit_fe' not found SR$direct.rate #> Error: object 'SR' not found"},{"path":"https://um-kevinhe.github.io/pprof/reference/SR_output.html","id":null,"dir":"Reference","previous_headings":"","what":"Provide direct/indirect standardization ratio or rate — SR_output","title":"Provide direct/indirect standardization ratio or rate — SR_output","text":"Provide direct/indirect standardization ratio rate","code":""},{"path":"https://um-kevinhe.github.io/pprof/reference/SR_output.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Provide direct/indirect standardization ratio or rate — SR_output","text":"","code":"SR_output(   fit,   stdz = \"indirect\",   measure = c(\"rate\", \"ratio\"),   null = \"median\",   Rcpp = TRUE,   threads = 2,   ... )"},{"path":"https://um-kevinhe.github.io/pprof/reference/SR_output.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Provide direct/indirect standardization ratio or rate — SR_output","text":"fit object output logis_fe function. stdz character string specifying standardization method. Defaulting \"indirect\". \"indirect\": using indirect standardized method \"direct\": using direct standardized method measure boolean indicating whether output measure \"ratio\" \"rate\". \"rate\" \"ratio\" provided default. \"rate\": output standardized rate. \"rate\" restricted 0% - 100%. \"ratio\": output standardized ratio. null \"stdz = indirect\", character string real number specifying null hypotheses fixed provider effects calculating standardized rate/ratio. Defaulting \"median\". Rcpp boolean indicating whether use Rcpp. Defaulting TRUE. threads integer specifying number threads use. Defaulting 2. ...","code":""},{"path":"https://um-kevinhe.github.io/pprof/reference/SR_output.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Provide direct/indirect standardization ratio or rate — SR_output","text":"return values depend user's choice standardization method measure type indirect.ratio vector standardization ratio using indirect method direct.ratio vector standardization ratio using direct method indirect.rate vector standardization rate using indirect method direct.rate vector standardization rate using direct method","code":""},{"path":"https://um-kevinhe.github.io/pprof/reference/SR_output.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Provide direct/indirect standardization ratio or rate — SR_output","text":"\"stdz\" \"measure\" arguments must explicitly provided. Users allowed specify \"stdz = c(\"indirect\", \"direct\")\" \"measure = c(\"rate\", \"ratio\")\" get multiple measures.","code":""},{"path":"https://um-kevinhe.github.io/pprof/reference/SR_output.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Provide direct/indirect standardization ratio or rate — SR_output","text":"K, Kalbfleisch, J, Li, Y, et al. (2013) Evaluating hospital readmission rates dialysis facilities; adjusting hospital effects. Lifetime Data Analysis, 19: 490-512.","code":""},{"path":"https://um-kevinhe.github.io/pprof/reference/SR_output.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Provide direct/indirect standardization ratio or rate — SR_output","text":"","code":"data(data_FE) data.prep <- fe_data_prep(data_FE$Y, data_FE$Z, data_FE$ID, message = FALSE) fit_fe <- logis_fe(data.prep) SR <- SR_output(fit_fe, stdz = \"direct\", measure = \"rate\") SR$direct.rate #>    Direct_standardized.rate #> 1                  49.27094 #> 2                  56.46127 #> 3                  37.79631 #> 4                  71.31486 #> 5                  52.11158 #> 6                  45.94477 #> 7                  49.81051 #> 8                  52.38627 #> 9                  64.71905 #> 10                 49.43288"},{"path":"https://um-kevinhe.github.io/pprof/reference/summary.linear_fe.html","id":null,"dir":"Reference","previous_headings":"","what":"Result Summaries of Covariate Estimates — summary.linear_fe","title":"Result Summaries of Covariate Estimates — summary.linear_fe","text":"Provide summary statistics covariate estimates fixed/random effect linear model.","code":""},{"path":"https://um-kevinhe.github.io/pprof/reference/summary.linear_fe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Result Summaries of Covariate Estimates — summary.linear_fe","text":"","code":"# S3 method for linear_fe summary(fit, parm, level = 0.95, null = 0, alternative = \"two.sided\")  # S3 method for linear_re summary(fit, parm, level = 0.95, null = 0, alternative = \"two.sided\")"},{"path":"https://um-kevinhe.github.io/pprof/reference/summary.linear_fe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Result Summaries of Covariate Estimates — summary.linear_fe","text":"fit model fitted linear_fe linear_re. parm Specifies subset covariates result summaries output. default, covariates included. level confidence level hypothesis test, meaning significance level \\(1 - \\text{level}\\). default value 0.95. null number defining null hypothesis covariate estimates. default value 0. alternative character string specifying alternative hypothesis, must one \"two.sided\" (default), \"greater\", \"less\".","code":""},{"path":"https://um-kevinhe.github.io/pprof/reference/summary.linear_fe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Result Summaries of Covariate Estimates — summary.linear_fe","text":"data frame containing summary statistics covariate estimates, following columns: Estimate estimates covariate coefficients. Std.Error standard error estimate. Stat test statistic. p value p-value hypothesis test. CI.upper lower bound confidence interval. CI.lower upper bound confidence interval.","code":""},{"path":"https://um-kevinhe.github.io/pprof/reference/summary.linear_fe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Result Summaries of Covariate Estimates — summary.linear_fe","text":"","code":"data(ExampleDataLinear) Y <- ExampleDataLinear$Y Z <- ExampleDataLinear$Z ID <- ExampleDataLinear$ID  fit_fe <- linear_fe(Y = Y, Z = Z, ID = ID) #> Input format: Y, Z, and ID. summary(fit_fe) #>     Estimate  Std.Error     Stat      p value  CI.Lower CI.Upper #> z1 1.0019028 0.01160106 86.36305 < 2.2204e-16 0.9791651 1.024640 #> z2 1.0063310 0.01133705 88.76478 < 2.2204e-16 0.9841108 1.028551 #> z3 0.9845622 0.01158151 85.01157 < 2.2204e-16 0.9618629 1.007262 #> z4 0.9903556 0.01140266 86.85303 < 2.2204e-16 0.9680068 1.012704 #> z5 1.0071783 0.01160058 86.82140 < 2.2204e-16 0.9844416 1.029915  data(ExampleDataLinear) Y <- ExampleDataLinear$Y Z <- ExampleDataLinear$Z ID <- ExampleDataLinear$ID  fit_re <- linear_re(Y = Y, Z = Z, ID = ID) #> Input format: Y, Z, and ID. summary(fit_re) #>               Estimate  Std.Error      Stat      p value   CI.Lower   CI.Upper #> (Intercept) -0.9672612 0.04175879 -23.16306 < 2.2204e-16 -1.0491197 -0.8854028 #> z1           1.0040375 0.01159347  86.60374 < 2.2204e-16  0.9813112  1.0267638 #> z2           1.0083839 0.01133143  88.99001 < 2.2204e-16  0.9861712  1.0305965 #> z3           0.9866551 0.01157430  85.24531 < 2.2204e-16  0.9639663  1.0093438 #> z4           0.9926726 0.01139510  87.11399 < 2.2204e-16  0.9703352  1.0150101 #> z5           1.0084572 0.01159407  86.98042 < 2.2204e-16  0.9857297  1.0311847"},{"path":"https://um-kevinhe.github.io/pprof/reference/summary.logis_fe.html","id":null,"dir":"Reference","previous_headings":"","what":"Result Summaries of Covariate Estimates — summary.logis_fe","title":"Result Summaries of Covariate Estimates — summary.logis_fe","text":"Provide summary statistics covariate estimates fixed effect logistic model.","code":""},{"path":"https://um-kevinhe.github.io/pprof/reference/summary.logis_fe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Result Summaries of Covariate Estimates — summary.logis_fe","text":"","code":"# S3 method for logis_fe summary(   fit,   parm,   level = 0.95,   test = \"wald\",   null = 0,   alternative = \"two.sided\" )"},{"path":"https://um-kevinhe.github.io/pprof/reference/summary.logis_fe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Result Summaries of Covariate Estimates — summary.logis_fe","text":"fit model fitted logis_fe. parm Specifies subset covariates result summaries output. default, covariates included. level confidence level hypothesis test, meaning significance level \\(1 - \\text{level}\\). default value 0.95. test character string specifying type testing method. default \"wald\". \"wald\"wald test. \"lr\"likelihood ratio test. \"score\"score test. null number defining null hypothesis covariate estimates. default value 0. alternative character string specifying alternative hypothesis test = \"wald\", must one \"two.sided\" (default), \"greater\", \"less\".","code":""},{"path":"https://um-kevinhe.github.io/pprof/reference/summary.logis_fe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Result Summaries of Covariate Estimates — summary.logis_fe","text":"data frame containing summary statistics covariate estimates, following columns: Estimate estimates covariate coefficients. Std.Error standard error estimate, included test = \"wald\". Stat test statistic. p value p-value hypothesis test. CI.upper lower bound confidence interval, included test = \"wald\". CI.lower upper bound confidence interval, included test = \"wald\".","code":""},{"path":"https://um-kevinhe.github.io/pprof/reference/summary.logis_fe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Result Summaries of Covariate Estimates — summary.logis_fe","text":"","code":"data(data_FE) #> Warning: data set 'data_FE' not found fit_fe <- logis_fe(Y = data_FE$Y, Z = data_FE$Z, ID = data_FE$ID, message = FALSE) #> Error: object 'data_FE' not found summary.wald <- summary(fit_fe, level = 0.95, test = \"wald\") #> Error: object 'fit_fe' not found summary.wald #> Error: object 'summary.wald' not found"},{"path":"https://um-kevinhe.github.io/pprof/reference/summary_fe_covar.html","id":null,"dir":"Reference","previous_headings":"","what":"Provide the summary statistics for covariate estimates — summary_fe_covar","title":"Provide the summary statistics for covariate estimates — summary_fe_covar","text":"Provide summary statistics covariate estimates","code":""},{"path":"https://um-kevinhe.github.io/pprof/reference/summary_fe_covar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Provide the summary statistics for covariate estimates — summary_fe_covar","text":"","code":"summary_fe_covar(fit, parm, level = 0.95, test = \"wald.cpp\", null = 0)"},{"path":"https://um-kevinhe.github.io/pprof/reference/summary_fe_covar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Provide the summary statistics for covariate estimates — summary_fe_covar","text":"fit object output logis_fe function. parm character vector specifies subset covariates. covariates included default. level confidence level used constructing confidence intervals. Defaulting 0.95. test character string specifying type testing method. Defaulting \"wald.cpp\". \"wald\": wald test \"wald.cpp\": wald test using cpp function \"lr\": likelihood ratio test \"score\": score test null null value covariate estimate requires testing. (e.g. test \\(H_0: \\beta = 0\\)) ...","code":""},{"path":"https://um-kevinhe.github.io/pprof/reference/summary_fe_covar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Provide the summary statistics for covariate estimates — summary_fe_covar","text":"dataframe containing summary statistics covariate estimates","code":""},{"path":"https://um-kevinhe.github.io/pprof/reference/summary_fe_covar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Provide the summary statistics for covariate estimates — summary_fe_covar","text":"","code":"data(data_FE) data.prep <- fe_data_prep(data_FE$Y, data_FE$Z, data_FE$ID, message = FALSE) fit_fe <- logis_fe(data.prep) summary.wald.cpp <- summary_fe_covar(fit_fe, level = 0.95, test = \"wald\") summary.wald.cpp #>          beta   se.beta            p   CI.lower   CI.upper #> Z1 -2.2958595 0.2559326 0.000000e+00 -2.7974782 -1.7942409 #> Z2 -1.2672733 0.1927867 4.916267e-11 -1.6451282 -0.8894184 #> Z3  0.5674081 0.1744281 1.142086e-03  0.2255353  0.9092810 #> Z4  3.4980033 0.3371212 3.185274e-25  2.8372578  4.1587488"},{"path":"https://um-kevinhe.github.io/pprof/reference/test.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic Function for Hypothesis Testing of Provider Effects — test","title":"Generic Function for Hypothesis Testing of Provider Effects — test","text":"test S3 generic function used conduct hypothesis tests provider effect coefficients detect outlying provider. function dispatches appropriate method based class input model (fit).","code":""},{"path":"https://um-kevinhe.github.io/pprof/reference/test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic Function for Hypothesis Testing of Provider Effects — test","text":"","code":"test(fit, ...)"},{"path":"https://um-kevinhe.github.io/pprof/reference/test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic Function for Hypothesis Testing of Provider Effects — test","text":"fit input object, typically fitted model, provider effects tested. method applied depends class object. ... Additional arguments can passed specific methods.","code":""},{"path":"https://um-kevinhe.github.io/pprof/reference/test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic Function for Hypothesis Testing of Provider Effects — test","text":"return depends method implemented class input object, typically including statistical outputs provider effect coefficients identification outlier providers.","code":""},{"path":"https://um-kevinhe.github.io/pprof/reference/test.linear_fe.html","id":null,"dir":"Reference","previous_headings":"","what":"Hypothesis Testing Function for Provider Effects — test.linear_fe","title":"Hypothesis Testing Function for Provider Effects — test.linear_fe","text":"Conduct hypothesis tests provider effects identify outlying providers fixed effect linear model.","code":""},{"path":"https://um-kevinhe.github.io/pprof/reference/test.linear_fe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hypothesis Testing Function for Provider Effects — test.linear_fe","text":"","code":"# S3 method for linear_fe test(fit, parm, level = 0.95, null = \"median\", alternative = \"two.sided\")"},{"path":"https://um-kevinhe.github.io/pprof/reference/test.linear_fe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hypothesis Testing Function for Provider Effects — test.linear_fe","text":"fit model fitted linear_fe. parm specifies subset providers confidence intervals given. default, providers included. class parm match class provider IDs. level confidence level hypothesis test, meaning significance level \\(1 - \\text{level}\\). default value 0.95. null character string number defining null hypothesis provider effects. default value \"median\". possible values : \"median\": median provider effect estimates (\\(\\hat{\\gamma}_i\\)). \"mean\": weighted average provider effect estimates (\\(\\hat{\\gamma}_i\\)), weights correspond sample size provider. numeric: user-defined numeric value representing null hypothesis. alternative character string specifying alternative hypothesis, must one \"two.sided\" (default), \"greater\", \"less\".","code":""},{"path":"https://um-kevinhe.github.io/pprof/reference/test.linear_fe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Hypothesis Testing Function for Provider Effects — test.linear_fe","text":"data frame containing results hypothesis test, following columns: flag flagging indicator 1 means statistically higher expected -1 means statistically lower expected. p-value p-value hypothesis test. stat test statistic. Std.Error standard error provider effect estimate.","code":""},{"path":"https://um-kevinhe.github.io/pprof/reference/test.linear_fe.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Hypothesis Testing Function for Provider Effects — test.linear_fe","text":"function identifies outlying providers based hypothesis test results. two-sided tests, 1 indicates performance significantly higher expected, -1 indicates lower, one-sided tests, 1 (right-tailed) -1 (left-tailed) flags used. Providers whose performance falls within central range flagged 0. Outlying providers determined test statistic falling beyond threshold based significance level \\(1 - \\text{level}\\).","code":""},{"path":"https://um-kevinhe.github.io/pprof/reference/test.linear_fe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hypothesis Testing Function for Provider Effects — test.linear_fe","text":"","code":"data(ExampleDataLinear) Y <- ExampleDataLinear$Y Z <- ExampleDataLinear$Z ID <- ExampleDataLinear$ID  fit_fe <- linear_fe(Y = Y, Z = Z, ID = ID) #> Input format: Y, Z, and ID. test(fit_fe) #>     flag      p value          stat Std.Error #> 1     -1 4.860982e-04  -3.488302284 0.1061799 #> 2     -1 5.551115e-15  -7.814559243 0.1106191 #> 3     -1 7.347050e-10  -6.158428158 0.1149027 #> 4      1 1.777726e-02   2.370225110 0.1164451 #> 5      1 1.638489e-02   2.400227447 0.1099507 #> 6      1 1.131641e-06   4.867246075 0.1119933 #> 7      0 5.186384e-01  -0.645445619 0.1164451 #> 8      0 9.939292e-01  -0.007608670 0.1197259 #> 9      0 7.613535e-01   0.303703827 0.1134201 #> 10     0 3.579793e-01  -0.919222280 0.1134201 #> 11    -1 1.387964e-04  -3.810303274 0.1172400 #> 12     1 1.786974e-02   2.368306198 0.1149027 #> 13    -1 5.121807e-04  -3.474303844 0.1119933 #> 14    -1 1.855375e-05  -4.281620099 0.1252124 #> 15     1 3.435395e-02   2.115892466 0.1134201 #> 16     1 1.874892e-08   5.623165843 0.1262022 #> 17     0 8.924988e-02  -1.699367959 0.1205904 #> 18    -1 1.294607e-06  -4.840580085 0.1156662 #> 19     1 7.139949e-03   2.690245431 0.1134201 #> 20    -1 1.405026e-03  -3.193616539 0.1092943 #> 21     1 6.522262e-06   4.508711202 0.1197259 #> 22     0 5.544278e-01  -0.591138231 0.1119933 #> 23     0 1.745596e-01   1.357697765 0.1252124 #> 24    -1 1.073488e-02  -2.551212534 0.1126999 #> 25     1 9.730263e-09   5.735364900 0.1073934 #> 26    -1 2.938787e-03  -2.974069247 0.1073934 #> 27     1 1.418100e-06   4.822443822 0.1164451 #> 28     1 2.750346e-06   4.688634167 0.1073934 #> 29     0 4.931175e-01  -0.685358874 0.1099507 #> 30    -1 2.280789e-02  -2.276637354 0.1092943 #> 31     0 5.211283e-01   0.641607097 0.1149027 #> 32    -1 8.739607e-06  -4.446216001 0.1119933 #> 33     0 4.201565e-01   0.806149753 0.1106191 #> 34    -1 2.985599e-04  -3.616546364 0.1126999 #> 35    -1 9.195939e-03  -2.604682664 0.1156662 #> 36    -1 1.038020e-03  -3.280013884 0.1086495 #> 37    -1 5.217624e-08  -5.443730172 0.1067815 #> 38    -1 6.793456e-03  -2.706802995 0.1172400 #> 39     1 4.460814e-04   3.511204341 0.1061799 #> 40    -1 2.220446e-16  -8.287279651 0.1164451 #> 41     1 3.857925e-12   6.942290615 0.1262022 #> 42    -1 8.361809e-06  -4.455704649 0.1304101 #> 43     1 5.394517e-03   2.782480137 0.1112999 #> 44     0 7.821479e-01   0.276521037 0.1061799 #> 45     0 2.297440e-01  -1.201018671 0.1044343 #> 46    -1 4.011210e-02  -2.052592611 0.1156662 #> 47     1 2.323887e-02   2.269484574 0.1112999 #> 48     1 3.667130e-10   6.267575427 0.1050066 #> 49    -1 9.127063e-03  -2.607257736 0.1080160 #> 50     0 1.424604e-01   1.466690178 0.1172400 #> 51     1 1.175110e-04   3.851261370 0.1044343 #> 52    -1 2.522857e-04  -3.659928472 0.1188798 #> 53     0 5.692369e-01   0.569175712 0.1141542 #> 54     1 1.873337e-11   6.715569067 0.1073934 #> 55     0 6.679848e-01   0.428915394 0.1055883 #> 56     0 6.710843e-02  -1.830947149 0.1197259 #> 57     1 8.171721e-07   4.931221031 0.1141542 #> 58    -1 3.076453e-02  -2.160105158 0.1006745 #> 59     1 4.298041e-05   4.090845108 0.1172400 #> 60     0 9.093061e-01   0.113913829 0.1252124 #> 61    -1 2.591428e-03  -3.012456219 0.1134201 #> 62     0 1.269926e-01   1.526069255 0.1106191 #> 63     1 4.199176e-04   3.527238965 0.1205904 #> 64     0 3.323655e-01   0.969360230 0.1164451 #> 65    -1 3.867300e-02  -2.067649445 0.1164451 #> 66     0 3.531710e-01   0.928456155 0.1223770 #> 67     0 7.129840e-02  -1.803572214 0.1164451 #> 68    -1 8.157024e-04  -3.347410794 0.1126999 #> 69     1 2.888335e-03   2.979378791 0.1141542 #> 70    -1 5.304596e-07  -5.014954705 0.1180513 #> 71     1 8.248057e-04   3.344333352 0.1073934 #> 72    -1 1.081794e-07  -5.312419183 0.1086495 #> 73     1 2.755091e-02   2.203622390 0.1149027 #> 74     0 1.133122e-01   1.583479607 0.1022355 #> 75     1 1.509772e-03   3.172798727 0.1038713 #> 76    -1 3.589391e-05  -4.132435759 0.1149027 #> 77     0 1.911100e-01   1.307302359 0.1363140 #> 78     0 1.362030e-01   1.490080680 0.1038713 #> 79     0 5.999694e-01  -0.524444544 0.1141542 #> 80     0 9.880878e-01  -0.014930250 0.1134201 #> 81     1 3.102391e-12   6.973006116 0.1086495 #> 82     0 2.922670e-01   1.053161462 0.1119933 #> 83    -1 3.071578e-06  -4.665974466 0.1172400 #> 84     1 1.018990e-08   5.727537367 0.1050066 #> 85     1 2.496223e-02   2.241986749 0.1033174 #> 86    -1 8.241468e-08  -5.361760679 0.1106191 #> 87     1 1.178969e-04   3.850458606 0.1073934 #> 88     0 9.936744e-01   0.007928052 0.1149027 #> 89     1 6.296463e-11   6.536524969 0.1022355 #> 90     0 6.346373e-01  -0.475210014 0.1099507 #> 91    -1 4.079574e-03  -2.871942346 0.1205904 #> 92    -1 0.000000e+00 -10.301342047 0.1149027 #> 93     1 4.217661e-09   5.875422560 0.1141542 #> 94     0 2.009328e-01  -1.278898474 0.1061799 #> 95     0 9.196299e-01  -0.100899882 0.1126999 #> 96     0 1.927696e-01  -1.302429397 0.1067815 #> 97     1 1.604677e-02   2.407850134 0.1282544 #> 98    -1 1.998912e-02  -2.326551969 0.1050066 #> 99     1 4.471202e-02   2.007353637 0.1205904 #> 100   -1 5.848805e-03  -2.756139495 0.1092943"},{"path":"https://um-kevinhe.github.io/pprof/reference/test.linear_re.html","id":null,"dir":"Reference","previous_headings":"","what":"Hypothesis Testing Function for Provider Effects — test.linear_re","title":"Hypothesis Testing Function for Provider Effects — test.linear_re","text":"Conduct hypothesis tests provider effects identify outlying providers random effect linear model.","code":""},{"path":"https://um-kevinhe.github.io/pprof/reference/test.linear_re.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hypothesis Testing Function for Provider Effects — test.linear_re","text":"","code":"# S3 method for linear_re test(fit, parm, level = 0.95, null = 0, alternative = \"two.sided\")"},{"path":"https://um-kevinhe.github.io/pprof/reference/test.linear_re.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hypothesis Testing Function for Provider Effects — test.linear_re","text":"fit model fitted linear_re. parm specifies subset providers confidence intervals given. default, providers included. class parm match class provider IDs. level confidence level hypothesis test, meaning significance level \\(1 - \\text{level}\\). default value 0.95. null number defining null hypothesis provider effects. default value 0. alternative character string specifying alternative hypothesis, must one \"two.sided\" (default), \"greater\", \"less\".","code":""},{"path":"https://um-kevinhe.github.io/pprof/reference/test.linear_re.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Hypothesis Testing Function for Provider Effects — test.linear_re","text":"data frame containing results hypothesis test, following columns: flag flagging indicator 1 means statistically higher expected -1 means statistically lower expected. p-value p-value hypothesis test. stat test statistic. Std.Error standard error provider effect estimate.","code":""},{"path":"https://um-kevinhe.github.io/pprof/reference/test.linear_re.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Hypothesis Testing Function for Provider Effects — test.linear_re","text":"function identifies outlying providers based hypothesis test results. two-sided tests, 1 indicates performance significantly higher expected, -1 indicates lower, one-sided tests, 1 (right-tailed) -1 (left-tailed) flags used. Providers whose performance falls within central range flagged 0. Outlying providers determined test statistic falling beyond threshold based significance level \\(1 - \\text{level}\\).","code":""},{"path":"https://um-kevinhe.github.io/pprof/reference/test.linear_re.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hypothesis Testing Function for Provider Effects — test.linear_re","text":"","code":"data(ExampleDataLinear) Y <- ExampleDataLinear$Y Z <- ExampleDataLinear$Z ID <- ExampleDataLinear$ID  fit_re <- linear_re(Y = Y, Z = Z, ID = ID) #> Input format: Y, Z, and ID. test(fit_re) #>     flag      p value        stat  Std.Error #> 1     -1 9.849440e-04 -3.29479245 0.10265926 #> 2     -1 9.459100e-14 -7.44823296 0.10665472 #> 3     -1 4.979833e-09 -5.84784463 0.11047812 #> 4      1 1.998695e-02  2.32659281 0.11184696 #> 5      1 1.685888e-02  2.38977092 0.10605528 #> 6      1 2.156337e-06  4.73819179 0.10788475 #> 7      0 5.838566e-01 -0.54776009 0.11184696 #> 8      0 9.517113e-01  0.06055794 0.11474457 #> 9      0 7.210019e-01  0.35712003 0.10915833 #> 10     0 4.108290e-01 -0.82243560 0.10915833 #> 11    -1 3.317048e-04 -3.58919176 0.11255074 #> 12     1 1.936608e-02  2.33840833 0.11047812 #> 13    -1 1.037049e-03 -3.28027789 0.10788475 #> 14    -1 5.774456e-05 -4.02184292 0.11954683 #> 15     1 3.640232e-02  2.09240477 0.10915833 #> 16     1 6.061092e-08  5.41698945 0.12040736 #> 17     0 1.186184e-01 -1.56059915 0.11550485 #> 18    -1 4.825661e-06 -4.57222771 0.11115622 #> 19     1 8.297466e-03  2.63971955 0.10915833 #> 20    -1 2.587218e-03 -3.01294969 0.10546583 #> 21     1 1.222753e-05  4.37349090 0.11474457 #> 22     0 6.147886e-01 -0.50324983 0.10788475 #> 23     0 1.770700e-01  1.34983169 0.11954683 #> 24    -1 1.728004e-02 -2.38069452 0.10851594 #> 25     1 2.183314e-08  5.59681027 0.10375476 #> 26    -1 5.042055e-03 -2.80433462 0.10375476 #> 27     1 2.770122e-06  4.68716755 0.11184696 #> 28     1 4.507880e-06  4.58647702 0.10375476 #> 29     0 5.537340e-01 -0.59217412 0.10605528 #> 30    -1 3.355062e-02 -2.12543152 0.10546583 #> 31     0 4.992543e-01  0.67566348 0.11047812 #> 32    -1 2.567770e-05 -4.20875911 0.10788475 #> 33     0 4.053838e-01  0.83204460 0.10665472 #> 34    -1 6.590875e-04 -3.40605564 0.10851594 #> 35    -1 1.491690e-02 -2.43439036 0.11115622 #> 36    -1 1.968703e-03 -3.09491343 0.10488611 #> 37    -1 2.274218e-07 -5.17540114 0.10320265 #> 38    -1 1.127415e-02 -2.53408471 0.11255074 #> 39     1 5.590355e-04  3.45074788 0.10265926 #> 40    -1 3.330669e-15 -7.88032018 0.11184696 #> 41     1 2.574681e-11  6.66904796 0.12040736 #> 42    -1 2.987962e-05 -4.17438190 0.12404519 #> 43     1 6.216137e-03  2.73615696 0.10726445 #> 44     0 7.323460e-01  0.34200646 0.10265926 #> 45     0 2.762180e-01 -1.08885455 0.10107918 #> 46     0 5.687696e-02 -1.90425517 0.11115622 #> 47     1 2.456654e-02  2.24815135 0.10726445 #> 48     1 9.566232e-10  6.11648427 0.10159774 #> 49    -1 1.427104e-02 -2.45036765 0.10431583 #> 50     0 1.410603e-01  1.47185391 0.11255074 #> 51     1 1.481175e-04  3.79420458 0.10107918 #> 52    -1 5.773191e-04 -3.44205208 0.11399910 #> 53     0 5.350212e-01  0.62035938 0.10981228 #> 54     1 5.968732e-11  6.54451864 0.10375476 #> 55     0 6.322764e-01  0.47852526 0.10212436 #> 56     0 9.345902e-02 -1.67742697 0.11474457 #> 57     1 1.672347e-06  4.78945527 0.10981228 #> 58    -1 4.280594e-02 -2.02559857 0.09765880 #> 59     1 6.879141e-05  3.98042763 0.11255074 #> 60     0 8.630292e-01  0.17251947 0.11954683 #> 61    -1 4.665139e-03 -2.82929012 0.10915833 #> 62     0 1.243915e-01  1.53659920 0.10665472 #> 63     1 5.851628e-04  3.43839991 0.11550485 #> 64     0 3.224779e-01  0.98937872 0.11184696 #> 65     0 5.428844e-02 -1.92452797 0.11184696 #> 66     0 3.437393e-01  0.94680270 0.11707190 #> 67     0 9.636027e-02 -1.66276107 0.11184696 #> 68    -1 1.656405e-03 -3.14578710 0.10851594 #> 69     1 3.489113e-03  2.92099866 0.10981228 #> 70    -1 2.044971e-06 -4.74892865 0.11326798 #> 71     1 9.690166e-04  3.29937128 0.10375476 #> 72    -1 4.599031e-07 -5.04232759 0.10488611 #> 73     1 2.943612e-02  2.17759606 0.11047812 #> 74     0 1.077182e-01  1.60853447 0.09908162 #> 75     1 1.724782e-03  3.13393652 0.10056848 #> 76    -1 9.517375e-05 -3.90257751 0.11047812 #> 77     0 1.976048e-01  1.28840576 0.12909282 #> 78     0 1.285959e-01  1.51966215 0.10056848 #> 79     0 6.654999e-01 -0.43233239 0.10981228 #> 80     0 9.605310e-01  0.04948721 0.10915833 #> 81     1 1.184552e-11  6.78208327 0.10488611 #> 82     0 2.849201e-01  1.06933197 0.10788475 #> 83    -1 1.056535e-05 -4.40526724 0.11255074 #> 84     1 2.130601e-08  5.60104771 0.10159774 #> 85     1 2.551830e-02  2.23346493 0.10006545 #> 86    -1 3.437835e-07 -5.09771191 0.10665472 #> 87     1 1.492368e-04  3.79233593 0.10375476 #> 88     0 9.415024e-01  0.07338167 0.11047812 #> 89     1 1.587182e-10  6.39675067 0.09908162 #> 90     0 6.957453e-01 -0.39107025 0.10605528 #> 91    -1 7.215661e-03 -2.68672370 0.11550485 #> 92    -1 0.000000e+00 -9.81942825 0.11047812 #> 93     1 1.258372e-08  5.69162331 0.10981228 #> 94     0 2.460243e-01 -1.16006023 0.10265926 #> 95     0 9.681103e-01 -0.03997847 0.10851594 #> 96     0 2.321935e-01 -1.19472743 0.10320265 #> 97     1 1.867855e-02  2.35188503 0.12218568 #> 98    -1 3.039919e-02 -2.16484984 0.10159774 #> 99     1 4.708968e-02  1.98549272 0.11550485 #> 100   -1 9.674801e-03 -2.58724060 0.10546583"},{"path":"https://um-kevinhe.github.io/pprof/reference/test.logis_fe.html","id":null,"dir":"Reference","previous_headings":"","what":"Hypothesis Testing Function for Provider Effects — test.logis_fe","title":"Hypothesis Testing Function for Provider Effects — test.logis_fe","text":"Conduct hypothesis tests provider effects identify outlying providers fixed effect logistic model.","code":""},{"path":"https://um-kevinhe.github.io/pprof/reference/test.logis_fe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hypothesis Testing Function for Provider Effects — test.logis_fe","text":"","code":"# S3 method for logis_fe test(   fit,   parm,   level = 0.95,   test = \"exact.poisbinom\",   score_modified = TRUE,   null = \"median\",   n = 10000,   threads = 1,   alternative = \"two.sided\" )"},{"path":"https://um-kevinhe.github.io/pprof/reference/test.logis_fe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hypothesis Testing Function for Provider Effects — test.logis_fe","text":"fit model fitted logis_fe. parm specifies subset providers confidence intervals given. default, providers included. class parm match class provider IDs. level confidence level hypothesis test, meaning significance level \\(1 - \\text{level}\\). default value 0.95. test character string specifying type testing method conducted. default \"exact.poisbinom\". \"exact.poisbinom\"exact test based Poisson-binomial distribution \\(O_i|Z_i\\). \"exact.bootstrap\"exact test based bootstrap procedure. \"wald\"wald test. \"score\"score test. score_modified logical indicating whether use modified score test ignoring randomness covariate coefficient score teat (\"test = score\"). default value TRUE. null character string number specifying null hypotheses fixed provider effects. default \"median\". n resample size bootstrapping (\"test = exact.bootstrap\"). default value 10,000. threads integer specifying number threads use. default value 1. alternative character string specifying alternative hypothesis, must one \"two.sided\" (default), \"greater\", \"less\".","code":""},{"path":"https://um-kevinhe.github.io/pprof/reference/test.logis_fe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Hypothesis Testing Function for Provider Effects — test.logis_fe","text":"data frame containing results hypothesis test, following columns: flag flagging indicator 1 means statistically higher expected -1 means statistically lower expected. p-value p-value hypothesis test. stat test statistic. Std.Error standard error provider effect estimate, included test = \"wald\".","code":""},{"path":"https://um-kevinhe.github.io/pprof/reference/test.logis_fe.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Hypothesis Testing Function for Provider Effects — test.logis_fe","text":"default, function uses \"exact.poisbinom\" method. wald test invalid extreme providers (.e. provider effect goes infinity). score test, consider number tested providers large, refitting models get restricted MLEs take long time. Therefore, use unrestricted MLEs replace restricted MLEs testing procedure default. However, user can specify score_modified = FALSE perform standard score test.","code":""},{"path":"https://um-kevinhe.github.io/pprof/reference/test.logis_fe.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Hypothesis Testing Function for Provider Effects — test.logis_fe","text":"Wu, W, Yang, Y, Kang, J, , K. (2022) Improving large-scale estimation inference profiling health care providers. Statistics Medicine, 41(15): 2840-2853.","code":""},{"path":"https://um-kevinhe.github.io/pprof/reference/test.logis_fe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hypothesis Testing Function for Provider Effects — test.logis_fe","text":"","code":"data(data_FE) #> Warning: data set 'data_FE' not found fit_fe <- logis_fe(Y = data_FE$Y, Z = data_FE$Z, ID = data_FE$ID, message = FALSE) #> Error: object 'data_FE' not found test(fit_fe, test = \"score\") #> Error: object 'fit_fe' not found"},{"path":"https://um-kevinhe.github.io/pprof/reference/test_fe.html","id":null,"dir":"Reference","previous_headings":"","what":"Conduct hypothesis testing for identifying outlying providers — test_fe","title":"Conduct hypothesis testing for identifying outlying providers — test_fe","text":"Conduct hypothesis testing identifying outlying providers","code":""},{"path":"https://um-kevinhe.github.io/pprof/reference/test_fe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conduct hypothesis testing for identifying outlying providers — test_fe","text":"","code":"test_fe(   fit,   parm,   level = 0.95,   test = \"exact.poisbinom\",   null = \"median\",   saddlepoint = FALSE,   n = 10000,   threads = 2,   ... )"},{"path":"https://um-kevinhe.github.io/pprof/reference/test_fe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conduct hypothesis testing for identifying outlying providers — test_fe","text":"fit object output logis_fe function. parm specify subset providers given confidence intervals. providers included default. level confidence level used constructing confidence intervals. Defaulting 0.95. test character string specifying type testing method conducted. Defaulting \"exact.poisbinom\". \"exact.poisbinom\": two-sided exact test based Poisson-binomial distribution \\(O_i|Z_i\\) \"exact.bootstrap\": two-sided exact test based bootstrap procedure \"wald\": wald test \"score\": score test \"modified.score\": modified score test null character string real number specifying null hypotheses fixed provider effects. saddlepoint test = \"score\", logical indicating whether use saddlepoint approximation score test. Defaulting FALSE. n resample size bootstrapping. Defaulting 10,000. threads integer specifying number threads use. Defaulting 2. ...","code":""},{"path":"https://um-kevinhe.github.io/pprof/reference/test_fe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Conduct hypothesis testing for identifying outlying providers — test_fe","text":"dataframe containing: flag vector flagging indicator. \"1\" means statistically higher expected, \"-1\" means statistically lower expected p p-value stat z-score","code":""},{"path":"https://um-kevinhe.github.io/pprof/reference/test_fe.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Conduct hypothesis testing for identifying outlying providers — test_fe","text":"default, function uses \"exact.poisbinom\" method. wald test invalid extreme providers (.e. provider effect goes infinity).","code":""},{"path":"https://um-kevinhe.github.io/pprof/reference/test_fe.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Conduct hypothesis testing for identifying outlying providers — test_fe","text":"Wu, W, Yang, Y, Kang, J, , K. (2022) Improving large-scale estimation inference profiling health care providers. Statistics Medicine, 41(15): 2840-2853.","code":""},{"path":"https://um-kevinhe.github.io/pprof/reference/test_fe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Conduct hypothesis testing for identifying outlying providers — test_fe","text":"","code":"data(data_FE) data.prep <- fe_data_prep(data_FE$Y, data_FE$Z, data_FE$ID, message = FALSE) fit_fe <- logis_fe(data.prep) test_fe(fit_fe, test = \"score\", saddlepoint = T, parm = c(1, 3, 5, 6)) #>   flag           p       stat #> 1    0 0.657329301 -0.4436035 #> 3   -1 0.001052562 -3.2760869 #> 5    0 0.795164163  0.2596106 #> 6    0 0.248123105 -1.1549202"}]
